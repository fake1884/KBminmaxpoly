beta.3=Y.gls.3$coefficients
sigma.3=Y.gls.3$sigma
plot(x,y, xlab="relative Zeit", ylab="relatives Wachstum", cex=2, lwd=3, cex.axis=2, cex.lab=2)
curve(beta.1[1]+beta.1[2]*x+beta.1[3]*x^2+beta.1[4]*x^3,add=T, cex=2, lwd=3)
curve(beta.3[1]+beta.3[2]*x+beta.3[3]*x^2+beta.3[4]*x^3+beta.3[4]*x^3, add=T,
cex=2, lwd=3, lty="dashed")
curve(beta.3[1]+beta.3[2]*x+beta.3[3]*x^2+beta.3[4]*x^3+beta.3[4]*x^4, add=T,
cex=2, lwd=3, lty="dashed")
plot(x,y, xlab="relative Zeit", ylab="relatives Wachstum", cex=2, lwd=3, cex.axis=2, cex.lab=2)
curve(beta.1[1]+beta.1[2]*x+beta.1[3]*x^2+beta.1[4]*x^3,add=T, cex=2, lwd=3)
curve(beta.3[1]+beta.3[2]*x+beta.3[3]*x^2+beta.3[4]*x^3+beta.3[4]*x^4, add=T,
cex=2, lwd=3, lty="dashed")
curve(beta.3[1]+beta.3[2]*x+beta.3[3]*x^2+beta.3[4]*x^3+beta.3[5]*x^4, add=T,
cex=2, lwd=3, lty="dashed")
plot(x,y, xlab="relative Zeit", ylab="relatives Wachstum", cex=2, lwd=3, cex.axis=2, cex.lab=2)
curve(beta.1[1]+beta.1[2]*x+beta.1[3]*x^2+beta.1[4]*x^3,add=T, cex=2, lwd=3)
curve(beta.3[1]+beta.3[2]*x+beta.3[3]*x^2+beta.3[4]*x^3+beta.3[5]*x^4, add=T,
cex=2, lwd=3, lty="dashed")
beta.3
beta.1
grad.3=4
Y.gls.3 <- gls(y~time+time.2+time.3+time.4,correlation=corAR1())
beta.3=Y.gls.3$coefficients
sigma.3=Y.gls.3$sigma
plot(x,y, xlab="relative Zeit", ylab="relatives Wachstum", cex=2, lwd=3, cex.axis=2, cex.lab=2)
curve(beta.1[1]+beta.1[2]*x+beta.1[3]*x^2+beta.1[4]*x^3,add=T, cex=2, lwd=3)
curve(beta.3[1]+beta.3[2]*x+beta.3[3]*x^2+beta.3[4]*x^3+beta.3[5]*x^4, add=T,
cex=2, lwd=3, lty="dashed")
legend(x="topleft", legend=c("Grad 1", "Grad 3"),
col=c("black", "black"),cex=2, lwd=3, lty=c("solid", "dashed"))
legend(x="topleft", legend=c("Grad 3", "Grad 4"),
col=c("black", "black"),cex=2, lwd=3, lty=c("solid", "dashed"))
niter=5000
par.bsp.poly.hetero=KB.poly.fast(alpha, length(y), 1, niter, inv.X.hetero.1, a=0, b=1, ngridpoly = 50)
X=matrix(data=NA,nrow=nobs,ncol=(grad+1))
for(j in 1:nobs){
for(i in 1:(grad+1)){X[j,i]=x[j]^(i-1)}
}
X.mat=t(X) %*% X
X.mat.inv.1=solve(X.mat)
X.mat
X.mat.inv.1
X.3=matrix(data=NA,nrow=nobs,ncol=(grad.3+1))
for(j in 1:nobs){
for(i in 1:(grad.3+1)){X.3[j,i]=x[j]^(i-1)}
}
X.mat.3=t(X.3) %*% X.3
X.mat.inv.3=solve(X.mat.3)
X.mat.3
X.mat.inv.3
par.bsp.poly.hetero=KB.poly.fast(alpha, length(y), 1, niter, inv.X.1, a=0, b=1, ngridpoly = 50)
inv.X.1
inv.X.1
X.mat.inv.1
par.bsp.poly.hetero=KB.poly.fast(alpha, length(y), 1, niter, X.mat.inv.1, a=0, b=1, ngridpoly = 50)
par.bsp.poly.hetero=KB.poly.fast(alpha, length(y), grad = 3, niter, X.mat.inv.1, a=0, b=1, ngridpoly = 50)
par.bsp.poly.1=KB.poly.fast(alpha, length(y), grad = 3, niter, X.mat.inv.1, a=0, b=1, ngridpoly = 100)
plot.KB.poly.hetero=plot.KB(length(y), grad = 3, inv.X.1, beta.1, sigma.1, par.bsp.poly.1[[1]],
ngrid = length(y))
plot.KB.poly.hetero=plot.KB(length(y), grad = 3, X.mat.inv.1, beta.1, sigma.1, par.bsp.poly.1[[1]],
ngrid = length(y))
par.bsp.poly.3=KB.poly.fast(alpha, length(y), grad = 4, niter, X.mat.inv.3, a=0, b=1, ngridpoly = 100)
plot.KB.poly.hetero=plot.KB(length(y), grad = 4, X.mat.inv.3, beta.1, sigma.1, par.bsp.poly.1[[1]],
ngrid = length(y))
plot.KB.poly.hetero=plot.KB(length(y), grad = 4, X.mat.inv.3, beta.3, sigma.3, par.bsp.poly.1[[1]],
ngrid = length(y))
plot(0,0,xlim=c(0,1),ylim=c(min(plot.KB.poly.hetero[[2]]),max(plot.KB.poly.hetero[[3]])),
xlab="relative Zeit", ylab="relatives Wachstum", cex=2, lwd=3, cex.axis=2, cex.lab=2)
points(x,y, cex=2, lwd=3)
curve(beta.1[1]+beta.1[2]*x+beta.1[3]*x^2+beta.1[4]*x^3,add=T, cex=2, lwd=3)
curve(beta.3[1]+beta.3[2]*x+beta.3[3]*x^2+beta.3[4]*x^3+beta.3[5]*x^4, add=T,
cex=2, lwd=3, lty="dashed")
lines(plot.KB.poly.hetero[[1]], plot.KB.poly.hetero[[2]], lty=1, cex=2, lwd=3)
lines(plot.KB.poly.hetero[[1]], plot.KB.poly.hetero[[3]], lty=1, cex=2, lwd=3)
plot(0,0,xlim=c(0,1),ylim=c(min(plot.KB.poly.hetero[[2]]),max(plot.KB.poly.hetero[[3]])),
xlab="relative Zeit", ylab="relatives Wachstum", cex=2, lwd=3, cex.axis=2, cex.lab=2)
points(x,y, cex=2, lwd=3)
curve(beta.1[1]+beta.1[2]*x+beta.1[3]*x^2+beta.1[4]*x^3,add=T, cex=2, lwd=3)
curve(beta.3[1]+beta.3[2]*x+beta.3[3]*x^2+beta.3[4]*x^3+beta.3[5]*x^4, add=T,
cex=2, lwd=3, lty="dashed")
lines(plot.KB.poly.1[[1]], plot.KB.poly.1[[2]], lty=1, cex=2, lwd=3)
plot.KB.poly.1=plot.KB(length(y), grad = 3, X.mat.inv.1, beta.1, sigma.1, par.bsp.poly.1[[1]],
ngrid = length(y))
plot.KB.poly.3=plot.KB(length(y), grad = 4, X.mat.inv.3, beta.3, sigma.3, par.bsp.poly.1[[1]],
ngrid = length(y))
lines(plot.KB.poly.1[[1]], plot.KB.poly.1[[2]], lty=1, cex=2, lwd=3)
lines(plot.KB.poly.1[[1]], plot.KB.poly.1[[3]], lty=1, cex=2, lwd=3)
lines(plot.KB.poly.3[[1]], plot.KB.poly.3[[2]], lty=1, cex=2, lwd=3)
lines(plot.KB.poly.3[[1]], plot.KB.poly.3[[3]], lty=1, cex=2, lwd=3)
legend(x="topleft", legend=c("Polynom AR"), cex=2, lty=1, lwd=3)
legend(x="topleft", legend=c("Grad 3", "Grad 4"), cex=2, lty=c(1, "dashed"), lwd=3)
legend(x="topleft", legend=c("Grad 3", "Grad 4"),
col=c("black","black"),cex=2, lty=c(1,2), lwd=3)
legend(x="topleft", legend=c("Grad 3", "Grad 4"),
col=c("black","black"),cex=2, lty=c(1,"dashed"), lwd=3)
legend(x="topleft", legend=c("Grad 3", "Grad 4"),
col=c("black","black"),cex=2, lty=c(1,2), lwd=3)
plot(0,0,xlim=c(0,1),ylim=c(min(plot.KB.poly.hetero[[2]]),max(plot.KB.poly.hetero[[3]])),
xlab="relative Zeit", ylab="relatives Wachstum", cex=2, lwd=3, cex.axis=2, cex.lab=2)
points(x,y, cex=2, lwd=3)
curve(beta.1[1]+beta.1[2]*x+beta.1[3]*x^2+beta.1[4]*x^3,add=T, cex=2, lwd=3)
curve(beta.3[1]+beta.3[2]*x+beta.3[3]*x^2+beta.3[4]*x^3+beta.3[5]*x^4, add=T,
cex=2, lwd=3, lty="dashed")
lines(plot.KB.poly.1[[1]], plot.KB.poly.1[[2]], lty=1, cex=2, lwd=3)
lines(plot.KB.poly.1[[1]], plot.KB.poly.1[[3]], lty=1, cex=2, lwd=3)
lines(plot.KB.poly.3[[1]], plot.KB.poly.3[[2]], lty="dashed", cex=2, lwd=3)
lines(plot.KB.poly.3[[1]], plot.KB.poly.3[[3]], lty="dashed", cex=2, lwd=3)
legend(x="topleft", legend=c("Grad 3", "Grad 4"),
col=c("black","black"),cex=2, lty=c(1,2), lwd=3)
pdf("man/0-Latex/graphics/Beispiel/Bsp-KB-poly-AR.pdf",
width=10,height=8)
plot(0,0,xlim=c(0,1),ylim=c(min(plot.KB.poly.hetero[[2]]),max(plot.KB.poly.hetero[[3]])),
xlab="relative Zeit", ylab="relatives Wachstum", cex=2, lwd=3, cex.axis=2, cex.lab=2)
points(x,y, cex=2, lwd=3)
curve(beta.1[1]+beta.1[2]*x+beta.1[3]*x^2+beta.1[4]*x^3,add=T, cex=2, lwd=3)
curve(beta.3[1]+beta.3[2]*x+beta.3[3]*x^2+beta.3[4]*x^3+beta.3[5]*x^4, add=T,
cex=2, lwd=3, lty="dashed")
lines(plot.KB.poly.1[[1]], plot.KB.poly.1[[2]], lty=1, cex=2, lwd=3)
lines(plot.KB.poly.1[[1]], plot.KB.poly.1[[3]], lty=1, cex=2, lwd=3)
lines(plot.KB.poly.3[[1]], plot.KB.poly.3[[2]], lty="dashed", cex=2, lwd=3)
lines(plot.KB.poly.3[[1]], plot.KB.poly.3[[3]], lty="dashed", cex=2, lwd=3)
legend(x="topleft", legend=c("Grad 3", "Grad 4"),
col=c("black","black"),cex=2, lty=c(1,2), lwd=3)
dev.off()
delta.mat.hetero=Delta(inv.X.1, inv.X.3)
delta.mat.hetero=Delta(X.mat.inv.1, X.mat.inv.3)
par.bsp.vergl.hetero=KB.poly.fast(alpha, length(y), 3, niter, delta.mat.hetero[[1]], a=0, b=1,
ngridpoly = length(y))
par.bsp.vergl.hetero=KB.poly.fast(alpha, length(y), grad = 4, niter, delta.mat.hetero[[1]], a=0, b=1,
ngridpoly = length(y))
plot.bsp.vergl.hetero=plot.KB.vergl(y, y, grad = 4, delta.mat.hetero[[1]], beta.hetero.1,
beta.hetero.3, sigma.hetero.1, sigma.hetero.3,
par.bsp.vergl.hetero[[1]], ngrid = length(y))
plot.bsp.vergl.hetero=plot.KB.vergl(y, y, grad = 4, delta.mat.hetero[[1]], beta.hetero.1,
beta.hetero.3, sigma.1, sigma.3,
par.bsp.vergl.hetero[[1]], ngrid = length(y))
plot.bsp.vergl.hetero=plot.KB.vergl(y, y, grad = 4, delta.mat.hetero[[1]], beta.1,
beta.3, sigma.1, sigma.3,
par.bsp.vergl.hetero[[1]], ngrid = length(y))
plot(0,0,xlim=c(0,1),ylim=c(min(plot.bsp.vergl.hetero[[2]]),max(plot.bsp.vergl.hetero[[3]])),
xlab="relative Zeit", ylab="relatives Wachstum", cex=2, lwd=3, cex.axis=2, cex.lab=2)
lines(c(1,0),c(0,0), cex=2, lwd=3)
curve(fit.hetero.1[[2]][1]-fit.hetero.3[[2]][1]+(fit.hetero.1[[2]][2]-fit.hetero.3[[2]][2])*x-fit.hetero.3[[2]][3]*x^2-fit.hetero.3[[2]][4]*x^3,
col="black", add=T, cex=2, lwd=3)
curve(beta.1[1]-beta.3[1]+(beta.1[2]-beta.3[2])*x-(beta.1[3]-beta.3[3])*x^2-(beta.1[4]-beta.3[4])*x^3-beta.3[4]*x^4,
col="black", add=T, cex=2, lwd=3)
beta.1[1]-beta.3[1]
beta.1[2]-beta.3[2]
beta.1[3]-beta.3[3]
beta.1[4]-beta.3[4]
beta.3[4]
curve(beta.1[1]-beta.3[1]+(beta.1[2]-beta.3[2])*x-(beta.1[3]-beta.3[3])*x^2-(beta.1[4]-beta.3[4])*x^3-beta.3[4]*x^4,
col="black", add=T, cex=2, lwd=3)
lines(plot.bsp.vergl.hetero[[1]], plot.bsp.vergl.hetero[[2]], col="black", cex=2, lwd=3)
lines(plot.bsp.vergl.hetero[[1]], plot.bsp.vergl.hetero[[3]], col="black", cex=2, lwd=3)
curve(beta.1[1]-beta.3[1]+(beta.1[2]-beta.3[2])*x+(beta.1[3]-beta.3[3])*x^2+(beta.1[4]-beta.3[4])*x^3+beta.3[4]*x^4,
col="black", add=T, cex=2, lwd=3)
curve(beta.1[1]-beta.3[1]+(beta.1[2]-beta.3[2])*x+(beta.1[3]-beta.3[3])*x^2+(beta.1[4]-beta.3[4])*x^3,
col="black", add=T, cex=2, lwd=3)
plot(0,0,xlim=c(0,1),ylim=c(min(plot.bsp.vergl.hetero[[2]]),max(plot.bsp.vergl.hetero[[3]])),
xlab="relative Zeit", ylab="relatives Wachstum", cex=2, lwd=3, cex.axis=2, cex.lab=2)
lines(c(1,0),c(0,0), cex=2, lwd=3)
curve(beta.1[1]-beta.3[1]+(beta.1[2]-beta.3[2])*x+(beta.1[3]-beta.3[3])*x^2+(beta.1[4]-beta.3[4])*x^3,
col="black", add=T, cex=2, lwd=3)
curve(beta.1[1]-beta.3[1]+(beta.1[2]-beta.3[2])*x+(beta.1[3]-beta.3[3])*x^2+(beta.1[4]-beta.3[4])*x^3-beta.3[4]*x^4,
col="black", add=T, cex=2, lwd=3)
plot(0,0,xlim=c(0,1),ylim=c(min(plot.bsp.vergl.hetero[[2]]),max(plot.bsp.vergl.hetero[[3]])),
xlab="relative Zeit", ylab="relatives Wachstum", cex=2, lwd=3, cex.axis=2, cex.lab=2)
lines(c(1,0),c(0,0), cex=2, lwd=3)
curve(beta.1[1]-beta.3[1]+(beta.1[2]-beta.3[2])*x+(beta.1[3]-beta.3[3])*x^2+(beta.1[4]-beta.3[4])*x^3-beta.3[4]*x^4,
col="black", add=T, cex=2, lwd=3)
lines(plot.bsp.vergl.hetero[[1]], plot.bsp.vergl.hetero[[2]], col="black", cex=2, lwd=3)
lines(plot.bsp.vergl.hetero[[1]], plot.bsp.vergl.hetero[[3]], col="black", cex=2, lwd=3)
beta.1[1]-beta.3[1]
beta.1[2]-beta.3[2]
beta.1[3]-beta.3[3]
beta.1[4]-beta.3[4]
beta.1-beta.3
c(beta.1,0)-beta.3
time
X
X.3
X.3%*%beta.vergl
beta.vergl=c(beta.1,0)-beta.3
X.3%*%beta.vergl
plot(0,0,xlim=c(0,1),ylim=c(min(plot.bsp.vergl.hetero[[2]]),max(plot.bsp.vergl.hetero[[3]])),
xlab="relative Zeit", ylab="relatives Wachstum", cex=2, lwd=3, cex.axis=2, cex.lab=2)
lines(c(1,0),c(0,0), cex=2, lwd=3)
beta.vergl=c(beta.1,0)-beta.3
lines(time, X.3%*%beta.vergl)
lines(plot.bsp.vergl.hetero[[1]], plot.bsp.vergl.hetero[[2]], col="black", cex=2, lwd=3)
lines(plot.bsp.vergl.hetero[[1]], plot.bsp.vergl.hetero[[3]], col="black", cex=2, lwd=3)
plot(0,0,xlim=c(0,1),ylim=c(min(plot.bsp.vergl.hetero[[2]]),max(plot.bsp.vergl.hetero[[3]])),
xlab="relative Zeit", ylab="relatives Wachstum", cex=2, lwd=3, cex.axis=2, cex.lab=2)
lines(c(1,0),c(0,0), cex=2, lwd=3)
beta.vergl=c(beta.1,0)-beta.3
lines(time, X.3%*%beta.vergl, cex=2, lwd=3)
lines(plot.bsp.vergl.hetero[[1]], plot.bsp.vergl.hetero[[2]], col="black", cex=2, lwd=3)
lines(plot.bsp.vergl.hetero[[1]], plot.bsp.vergl.hetero[[3]], col="black", cex=2, lwd=3)
source('~/Dokumente/R/07-Bachelorarbeit-Konfidenzbaender/KBminmaxpoly/man/Beispiel-AR.R')
source('~/Dokumente/R/07-Bachelorarbeit-Konfidenzbaender/KBminmaxpoly/man/Beispiel-AR.R')
cov.poly.fast.R=NA
system.time({cov.ploy.fast.R=Coverage.prob.fun("R", "minmax-poly-fast", niter = 5000, ngridpoly = 100)})
cov.poly.fast.R
?delete
cov.poly.fast.R=NA
system.time({cov.ploy.fast.R=Coverage.prob.fun("R", "minmax-poly-fast", niter = 5000, ngridpoly = 100)})
cov.poly.fast.R=NA
system.time({cov.ploy.fast.R=Coverage.prob.fun("R", "minmax-poly-fast", niter = 5000, ngridpoly = 100)})
cov.poly.fast.R=NA
system.time({cov.poly.fast.R=Coverage.prob.fun("R", "minmax-poly-fast", niter = 5000, ngridpoly = 100)})
source('~/Dokumente/R/07-Bachelorarbeit-Konfidenzbaender/KBminmaxpoly/man/Beispiel-R.R')
plot(x,y, xlab="relative Zeit", ylab="relatives Wachstum", cex=2, lwd=3, cex.axis=2, cex.lab=2)
curve(fit.1[[2]][1]+fit.1[[2]][2]*x+fit.1[[2]][3]*x^2+fit.1[[2]][4]*x^3, add=T, cex=2, lwd=3)
curve(fit.3[[2]][1]+fit.3[[2]][2]*x+fit.3[[2]][3]*x^2+fit.3[[2]][4]*x^3+fit.3[[2]][5]*x^4,
add=T, lty="dashed", cex=2, lwd=3)
plot(0,0,xlim=c(0,1),ylim=c(min(plot.bsp.vergl[[2]]),max(plot.bsp.vergl[[3]])), xlab="relative Zeit",
ylab="relatives Wachstum", cex=2, lwd=3, cex.axis=2, cex.lab=2)
lines(c(1,0),c(0,0), cex=2, lwd=3)
curve(fit.1[[2]][1]-fit.3[[2]][1]+(fit.1[[2]][2]-fit.3[[2]][2])*x+(fit.1[[2]][3]-fit.3[[2]][3])*x^2+
(fit.1[[2]][4]-fit.3[[2]][4])*x^3-fit.3[[2]][5]*x^4
, add=T, cex=2, lwd=3)
lines(plot.bsp.vergl[[1]], plot.bsp.vergl[[2]], lty=1, cex=2, lwd=3)
lines(plot.bsp.vergl[[1]], plot.bsp.vergl[[3]], lty=1, cex=2, lwd=3)
erg
teststat
q
set.seed(100)
ntest=100
grad=5
nobs=50
beta=c(10,5,-4,7,3,-4)
x.raw=c(0:(nobs-1))
x=x.raw/max(x.raw)
X=matrix(data=NA,nrow=nobs,ncol=(grad+1))
for(j in 1:nobs){
for(i in 1:(grad+1)){X[j,i]=x[j]^(i-1)}
}
mu=X%*%beta
sigma.true=sqrt(var(mu))/2  ##choose SNR 1 (low) or 3 (medium)
I=matrix(diag(nobs),nrow=nobs,ncol=nobs)
View(sigma.true)
data_R_true <- (X %*% beta)
alpha=0.05
ngrid=nobs
X.mat=t(X) %*% X
X.mat.inv=solve(X.mat)
a=0
b=1
data_R_test=matrix(rep(rep(NA, ntest), nobs), nrow=nobs)
for(i in 1:ntest)
{
# wahre Werte erzeugen
e=mvtnorm::rmvnorm(1,mean=rep(0,length(x.raw)),sigma.true[1]*I)
data_R_test[,i]=X %*% beta + t(e)
}
data_R_test
data_R_test[1]
data_R_test[1,]
set.seed(100)
ntest=100
grad=2
nobs=50
beta=c(10,5)
x.raw=c(0:(nobs-1))
x=x.raw/max(x.raw)
X=matrix(data=NA,nrow=nobs,ncol=(grad+1))
for(j in 1:nobs){
for(i in 1:(grad+1)){X[j,i]=x[j]^(i-1)}
}
mu=X%*%beta
sigma.true=sqrt(var(mu))/2  ##choose SNR 1 (low) or 3 (medium)
X
grad=1
nobs=50
beta=c(10,5)
x.raw=c(0:(nobs-1))
x=x.raw/max(x.raw)
X=matrix(data=NA,nrow=nobs,ncol=(grad+1))
for(j in 1:nobs){
for(i in 1:(grad+1)){X[j,i]=x[j]^(i-1)}
}
mu=X%*%beta
sigma.true=sqrt(var(mu))/2  ##choose SNR 1 (low) or 3 (medium)
I=matrix(diag(nobs),nrow=nobs,ncol=nobs)
data_R_true <- (X %*% beta)
alpha=0.05
ngrid=nobs
X.mat=t(X) %*% X
X.mat.inv=solve(X.mat)
a=0
b=1
data_R_test=matrix(rep(rep(NA, ntest), nobs), nrow=nobs)
for(i in 1:ntest)
{
# wahre Werte erzeugen
e=mvtnorm::rmvnorm(1,mean=rep(0,length(x.raw)),sigma.true[1]*I)
data_R_test[,i]=X %*% beta + t(e)
}
plot(x, data_R_test[,1])
lines(x, data_R_true)
plot(x, data_R_test[,2])
plot(x, data_R_test[,3])
source('~/Dokumente/R/07-Bachelorarbeit-Konfidenzbaender/KBminmaxpoly/man/Beispiel-R.R')
devtools::load_all(".")
set.seed(100)
ntest=1000
grad=1
nobs=200
beta=c(10,5)
x.raw=c(0:(nobs-1))
x=x.raw/max(x.raw)
X=matrix(data=NA,nrow=nobs,ncol=(grad+1))
for(j in 1:nobs){
for(i in 1:(grad+1)){X[j,i]=x[j]^(i-1)}
}
mu=X%*%beta
sigma.true=sqrt(var(mu))/2  ##choose SNR 1 (low) or 3 (medium)
I=matrix(diag(nobs),nrow=nobs,ncol=nobs)
data_R_true <- (X %*% beta)
alpha=0.05
ngrid=nobs
X.mat=t(X) %*% X
X.mat.inv=solve(X.mat)
a=0
b=1
data_R_test=matrix(rep(rep(NA, ntest), nobs), nrow=nobs)
for(i in 1:ntest)
{
# wahre Werte erzeugen
e=mvtnorm::rmvnorm(1,mean=rep(0,length(x.raw)),sigma.true[1]*I)
data_R_test[,i]=X %*% beta + t(e)
}
data_modelR_estR_beta=matrix(rep(rep(NA, ntest), grad+1), nrow=grad+1)
data_modelR_estR_sigma=matrix(rep(rep(NA, ntest), 1), nrow=1)
for(i in 1:ntest)
{
# Parameter schätzen
fit.1=lm(data_R_test[,i]~poly(x,degree=grad,raw=T))
data_modelR_estR_beta[,i]=fit.1$coeff
data_modelR_estR_sigma[i]=summary(fit.1)$sigma
}
support_data_R <- list(ntest, nobs, grad ,beta, x, X, sigma.true, alpha, ngrid, X.mat, X.mat.inv,
a, b)
names(support_data_R) <- paste(c("ntest", "nobs", "grad" ,"beta", "x", "X", "sigma.true", "alpha", "ngrid",
"X.mat", "X.mat.inv", "a", "b"), sep="")
devtools::use_data(data_R_test, overwrite = T)
devtools::use_data(data_R_true, overwrite = T)
devtools::use_data(data_modelR_estR_beta, overwrite = T)
devtools::use_data(data_modelR_estR_sigma, overwrite = T)
devtools::use_data(support_data_R, overwrite = T)
devtools::load_all(".")
source('~/Dokumente/R/07-Bachelorarbeit-Konfidenzbaender/KBminmaxpoly/R/make-test-data-R.R')
Make.data.R()
devtools::load_all(".")
Coverage.prob.fun("R", "R")
Coverage.prob.fun("R", "minmax", niter = 100)
par.bsp.R=KB.R(support_data_R$alpha, data_R_test[,i], support_data_R$grad, support_data_R$X.mat.inv)
i=1
par.bsp.R=KB.R(support_data_R$alpha, data_R_test[,i], support_data_R$grad, support_data_R$X.mat.inv)
par.bsp.R
plot.KB.R=plot.KB(support_data_R$nobs, support_data_R$grad, support_data_R$X.mat.inv,
data_modelR_estR_beta[,i], data_modelR_estR_sigma[i], par.bsp.R[[1]],
support_data_R$ngrid)
set.seed(100)
ntest=1000
grad=1
nobs=200
beta=c(10,5)
x.raw=c(0:(nobs-1))
x=x.raw/max(x.raw)
X=matrix(data=NA,nrow=nobs,ncol=(grad+1))
for(j in 1:nobs){
for(i in 1:(grad+1)){X[j,i]=x[j]^(i-1)}
}
mu=X%*%beta
sigma.true=sqrt(var(mu))/2  ##choose SNR 1 (low) or 3 (medium)
I=matrix(diag(nobs),nrow=nobs,ncol=nobs)
data_R_true <- (X %*% beta)
alpha=0.05
ngrid=nobs
X.mat=t(X) %*% X
X.mat.inv=solve(X.mat)
a=0
b=1
data_R_test=matrix(rep(rep(NA, ntest), nobs), nrow=nobs)
for(i in 1:ntest)
{
# wahre Werte erzeugen
e=mvtnorm::rmvnorm(1,mean=rep(0,length(x.raw)),sigma.true[1]*I)
data_R_test[,i]=X %*% beta + t(e)
}
data_modelR_estR_beta=matrix(rep(rep(NA, ntest), grad+1), nrow=grad+1)
data_modelR_estR_sigma=matrix(rep(rep(NA, ntest), 1), nrow=1)
for(i in 1:ntest)
{
# Parameter schätzen
fit.1=lm(data_R_test[,i]~poly(x,degree=grad,raw=T))
data_modelR_estR_beta[,i]=fit.1$coeff
data_modelR_estR_sigma[i]=summary(fit.1)$sigma
}
support_data_R <- list(ntest, nobs, grad ,beta, x, X, sigma.true, alpha, ngrid, X.mat, X.mat.inv,
a, b)
names(support_data_R) <- paste(c("ntest", "nobs", "grad" ,"beta", "x", "X", "sigma.true", "alpha", "ngrid",
"X.mat", "X.mat.inv", "a", "b"), sep="")
devtools::use_data(data_R_test, overwrite = T)
devtools::use_data(data_R_true, overwrite = T)
devtools::use_data(data_modelR_estR_beta, overwrite = T)
devtools::use_data(data_modelR_estR_sigma, overwrite = T)
devtools::use_data(support_data_R, overwrite = T)
plot(x, data_R_test[,1])
lines(x, data_R_true)
data_modelR_estR_beta[,1]
X
lines(x, X %*% data_modelR_estR_beta[,1])
data_modelR_estR_beta[,1]
par.bsp.R=KB.R(support_data_R$alpha, data_R_test[,i], support_data_R$grad, support_data_R$X.mat.inv)
i
i=1
par.bsp.R=KB.R(support_data_R$alpha, data_R_test[,i], support_data_R$grad, support_data_R$X.mat.inv)
par.bsp.R=KB.R(support_data_R$alpha, data_R_test[,i], support_data_R$grad, support_data_R$X.mat.inv)
par.bsp.R
plot.KB.R=plot.KB(support_data_R$nobs, support_data_R$grad, support_data_R$X.mat.inv,
data_modelR_estR_beta[,i], data_modelR_estR_sigma[i], par.bsp.R[[1]],
support_data_R$ngrid)
lines(x, plot.KB.R[2])
length(plot.KB.R[2])
length(plot.KB.R[[2]])
length(plot.KB.R[[2]])
lines(x, plot.KB.R[[2]])
lines(x, plot.KB.R[[2]], col="Red")
lines(x, plot.KB.R[[3]], col="Red")
Test.function(support_data_R$nobs, plot.KB.R[[2]], plot.KB.R[[3]], model.type)
model.type="R"
Test.function(support_data_R$nobs, plot.KB.R[[2]], plot.KB.R[[3]], model.type)
i=2
plot(x, data_R_test[,2])
par.bsp.R=KB.R(support_data_R$alpha, data_R_test[,i], support_data_R$grad, support_data_R$X.mat.inv)
plot.KB.R=plot.KB(support_data_R$nobs, support_data_R$grad, support_data_R$X.mat.inv,
data_modelR_estR_beta[,i], data_modelR_estR_sigma[i], par.bsp.R[[1]],
support_data_R$ngrid)
lines(x, plot.KB.R[[3]], col="Red")
lines(x, plot.KB.R[[2]], col="Red")
lines(x, data_data_R_true)
lines(x, data_R_true)
Coverage.prob.fun("R", "R")
plot(x, data_R_test[,100])
plot(x, data_R_test[,1000])
devtools::load_all(".")
Make.data.R()
devtools::load_all(".")
Coverage.prob.fun("R", "R")
devtools::load_all(".")
Coverage.prob.fun("R", "R")
cov.poly.fast.R=NA
system.time({cov.poly.fast.R=Coverage.prob.fun("R", "minmax-poly-fast", niter = 5000, ngridpoly = 100)})
system.time({cov.poly.fast.R=Coverage.prob.fun("R", "minmax-poly-fast", niter = 50, ngridpoly = 100)})
devtools::load_all(".")
cov.poly.fast.R=NA
system.time({cov.poly.fast.R=Coverage.prob.fun("R", "minmax-poly-fast", niter = 50, ngridpoly = 100)})
cov.poly.fast.R=NA
system.time({cov.poly.fast.R=Coverage.prob.fun("R", "minmax-poly-fast", niter = 1, ngridpoly = 100)})
devtools::load_all(".")
system.time({cov.poly.fast.R=Coverage.prob.fun("R", "minmax-poly-fast", niter = 1, ngridpoly = 100)})
devtools::load_all(".")
system.time({cov.poly.fast.R=Coverage.prob.fun("R", "minmax-poly-fast", niter = 1, ngridpoly = 100)})
i=1
par.bsp.R=KB.poly.fast(support_data_R$alpha, support_data_R$nobs, support_data_R$grad,
niter,support_data_R$X.mat.inv, support_data_R$a,
support_data_R$b, ngridpoly)
ngridpoly=100
par.bsp.R=KB.poly.fast(support_data_R$alpha, support_data_R$nobs, support_data_R$grad,
niter,support_data_R$X.mat.inv, support_data_R$a,
support_data_R$b, ngridpoly)
niter=1
par.bsp.R=KB.poly.fast(support_data_R$alpha, support_data_R$nobs, support_data_R$grad,
niter,support_data_R$X.mat.inv, support_data_R$a,
support_data_R$b, ngridpoly)
par.bsp.R
?paste
paste("tests/Funktion_h/test.pdf")
paste("tests/Funktion_h/test.pdf", sep="")
paste(c("tests/Funktion_h/test.pdf",i), sep="")
paste(c("tests/Funktion_h/test.pdf",i), sep=" ")
paste("tests/Funktion_h/test.pdf",i, sep=" ")
paste("tests/Funktion_h/test.pdf",i, sep="")
paste("tests/Funktion_h/test,i,.pdf", sep="")
paste("tests/Funktion_h/test",i,".pdf", sep="")
cov.poly.fast.R=NA
system.time({cov.poly.fast.R=Coverage.prob.fun("R", "minmax-poly-fast", niter = 1, ngridpoly = 100)})
a=0
b=1
ngridploy=100
seq(a, b, len = ngridpoly + 1)
devtools::load_all(".")
system.time({cov.poly.fast.R=Coverage.prob.fun("R", "minmax-poly-fast", niter = 1, ngridpoly = 100)})
devtools::load_all(".")
cov.poly.fast.R=NA
system.time({cov.poly.fast.R=Coverage.prob.fun("R", "minmax-poly-fast", niter = 1, ngridpoly = 100)})
system.time({cov.poly.fast.R=Coverage.prob.fun("R", "minmax-poly-fast", niter = 1, ngridpoly = 10)})
system.time({cov.poly.fast.R=Coverage.prob.fun("R", "minmax-poly-fast", niter = 2, ngridpoly = 10)})
cov.poly.fast.R=NA
system.time({cov.poly.fast.R=Coverage.prob.fun("R", "minmax-poly-fast", niter = 1000, ngridpoly = 100)})
Coverage.prob.fun("R", "R")
cov.R.R=NA
system.time({cov.R.R=Coverage.prob.fun("R", "R")})
cov.R.minmax=NA
system.time({cov.R.minmax=Coverage.prob.fun("R", "minmax", niter = 1000)})
cov.R.minmax=NA
system.time({cov.R.minmax=Coverage.prob.fun("R", "minmax", niter = 1000)})
cov.R.poly=NA
system.time({cov.R.poly=Coverage.prob.fun("R", "minmax-poly", niter = 1000)})
