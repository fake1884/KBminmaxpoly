x=x.raw/max(x.raw)
X=numeric()
for(i in 1:(grad+1)){X=matrix(c(X,x^(i-1)),ncol=i)}
beta=c(10,5,-4,7)
sigma=1
phi=0.75
Upsilon = diag(length(x.raw))
for (j in 1:(length(x.raw)-1)){
for (i in (1+j):length(x.raw))
{
Upsilon[i,j]=phi^(i-j)
}
}
for (j in 1:(length(x.raw)-1)){
for (i in (1+j):length(x.raw))
{
Upsilon[j,i]=phi^(i-j)
}
}
Upsilon=Upsilon*sigma
e=rmvnorm(1,mean=rep(0,length(x.raw)),Upsilon)
y.raw=X %*% beta + t(e)
pdf("man/0-Latex/graphics/Beispiel/data-raw.pdf",
width=10,height=8)
plot(x.raw,y.raw, xlab="Zeit", ylab="Wachstum", pch=1)
dev.off()
y=y.raw/max(y.raw)
grad.1=1
fit.1=OLS(grad.1, y, length(y))
inv.X.1=fit.1[[1]]
beta.1=fit.1[[2]]
sigma.1=fit.1[[3]]
pdf("man/0-Latex/graphics/Beispiel/regression-gerade.pdf",
width=10,height=8)
plot(x,y,xlab="relative Zeit", ylab="relatives Wachstum")
curve(fit.1[[2]][1]+fit.1[[2]][2]*x, add=T, lwd=2)
dev.off()
alpha=0.05
par.bsp.R=KB.R(alpha, y, grad.1, inv.X.1)
plot.KB.R=plot.KB(y, grad.1, inv.X.1, beta.1, sigma.1, par.bsp.R[[1]])
plot.KB.R=plot.KB(y, grad.1, inv.X.1, beta.1, sigma.1, par.bsp.R[[1]], ngrid = length(y))
nobs
length(y)
plot.KB.R=plot.KB(length(y), grad.1, inv.X.1, beta.1, sigma.1, par.bsp.R[[1]], ngrid = length(y))
par.bsp.punkt=qt(1-alpha/2, length(y)-grad.1-1)
plot.KB.punkt=plot.KB(y, grad.1, inv.X.1, beta.1, sigma.1, par.bsp.punkt)
plot.KB.punkt=plot.KB(length(y), grad.1, inv.X.1, beta.1, sigma.1, par.bsp.punkt, ngrid = length(y))
pdf("man/0-Latex/graphics/Beispiel/punkt-vs-gleich.pdf",
width=10,height=8)
plot(0,0,xlim=c(0,1),ylim=c(min(plot.KB.R[[2]]),max(plot.KB.R[[3]])), xlab="relative Zeit",
ylab="relatives Wachstum")
points(x,y)
curve(fit.1[[2]][1]+fit.1[[2]][2]*x, add=T)
lines(plot.KB.R[[1]], plot.KB.R[[2]], lty=1, lwd=2)
lines(plot.KB.R[[1]], plot.KB.R[[3]], lty=1, lwd=2)
lines(plot.KB.punkt[[1]], plot.KB.punkt[[2]], lty=2, lwd=2)
lines(plot.KB.punkt[[1]], plot.KB.punkt[[3]], lty=2, lwd=2)
legend(x="topleft", legend=c("gleichm??ig","punktweise"),
col=c("black","black"),cex=0.7, lty=c(1,2))
dev.off()
alpha=0.05
par.bsp.R=KB.R(alpha, y, grad.1, inv.X.1)
plot.KB.R=plot.KB(y, grad.1, inv.X.1, beta.1, sigma.1, par.bsp.R[[1]])
plot.KB.R=plot.KB(length(y), grad.1, inv.X.1, beta.1, sigma.1, par.bsp.R[[1]], ngrid = length(y))
pdf("man/0-Latex/graphics/Beispiel/Bsp-KB-R.pdf",
width=10,height=8)
plot(0,0,xlim=c(0,1),ylim=c(min(plot.KB.R[[2]]),max(plot.KB.R[[3]])), xlab="relative Zeit",
ylab="relatives Wachstum")
points(x,y)
curve(fit.1[[2]][1]+fit.1[[2]][2]*x, add=T)
lines(plot.KB.R[[1]], plot.KB.R[[2]], lty=1, lwd=2)
lines(plot.KB.R[[1]], plot.KB.R[[3]], lty=1, lwd=2)
legend(x="topleft", legend=c("R"),
col=c("black"),cex=0.7, lty=c("solid"))
dev.off()
set.seed(4)
niter=50
par.bsp.minmax=KB.minmax(alpha, y, 1, niter, inv.X.1)
plot.KB.minmax=plot.KB(y, 1, inv.X.1, beta.1, sigma.1, par.bsp.minmax[[1]])
plot.KB.minmax=plot.KB(length(y), 1, inv.X.1, beta.1, sigma.1, par.bsp.minmax[[1]], ngrid = length(y))
pdf("man/0-Latex/graphics/Beispiel/Bsp-KB-minmax.pdf",
width=10,height=8)
plot(0,0,xlim=c(0,1),ylim=c(min(plot.KB.R[[2]]),max(plot.KB.R[[3]])), xlab="relative Zeit",
ylab="relatives Wachstum")
points(x,y)
curve(fit.1[[2]][1]+fit.1[[2]][2]*x, add=T)
lines(plot.KB.R[[1]], plot.KB.R[[2]], lty=1, lwd=2)
lines(plot.KB.R[[1]], plot.KB.R[[3]], lty=1, lwd=2)
lines(plot.KB.minmax[[1]], plot.KB.minmax[[2]], lty=2, lwd=2)
lines(plot.KB.minmax[[1]], plot.KB.minmax[[3]], lty=2, lwd=2)
legend(x="topleft", legend=c("R", "[0,1]"),
col=c("black", "black"),cex=0.7, lty=c("solid", "dotted"))
dev.off()
par.bsp.poly=KB.poly(alpha, y, 1, niter, inv.X.1)
par.bsp.poly=KB.poly.fast(alpha, length(y), 1, niter, inv.X.1, a=0, b=1, ngridpoly = 10)
plot.KB.poly=plot.KB(length(y), 1, inv.X.1, beta.1, sigma.1, par.bsp.poly[[1]], ngrid = length(y))
pdf("man/0-Latex/graphics/Beispiel/Bsp-KB-poly.pdf",
width=10,height=8)
plot(0,0,xlim=c(0,1),ylim=c(min(plot.KB.R[[2]]),max(plot.KB.R[[3]])), xlab="relative Zeit",
ylab="relatives Wachstum")
points(x,y)
curve(fit.1[[2]][1]+fit.1[[2]][2]*x, add=T)
lines(plot.KB.R[[1]], plot.KB.R[[2]], lty=1, lwd=2)
lines(plot.KB.R[[1]], plot.KB.R[[3]], lty=1, lwd=2)
lines(plot.KB.minmax[[1]], plot.KB.minmax[[2]], lty=2, lwd=2)
lines(plot.KB.minmax[[1]], plot.KB.minmax[[3]], lty=2, lwd=2)
lines(plot.KB.poly[[1]], plot.KB.poly[[2]], lty=3, lwd=2)
lines(plot.KB.poly[[1]], plot.KB.poly[[3]], lty=3, lwd=2)
legend(x="topleft", legend=c("R", "[0,1]", "Polynom"),
col=c("black", "black", "black"),cex=0.7, lty=c("solid", "dotted", "dashed"))
dev.off()
grad.3=3
fit.3=OLS(grad.3, y)
fit.3=OLS(grad.3, y, length(y))
inv.X.3=fit.3[[1]]
beta.3=fit.3[[2]]
sigma.3=fit.3[[3]]
pdf("man/0-Latex/graphics/Beispiel/Bsp-beide-in-einem-plot.pdf",
width=10,height=8)
plot(x,y, xlab="relative Zeit", ylab="relatives Wachstum")
abline(a=fit.1[[2]][1],b=fit.1[[2]][2],lwd=2)
curve(fit.3[[2]][1]+fit.3[[2]][2]*x+fit.3[[2]][3]*x^2+fit.3[[2]][4]*x^3,
add=T, lwd=2, lty="dotted")
legend(x="topleft", legend=c("Grad 1", "Grad 3"),
col=c("black", "black"),cex=0.7, lty=c("solid", "dotted"))
dev.off()
alpha=0.95
data.1=y
data.2=y
erg=f.test(alpha, grad.1, grad.3, data.1, data.2)
teststat=erg[1]
erg=f.test(alpha, grad.1, grad.3, data.1, data.2)
devtools::load_all(".")
erg=f.test(alpha, grad.1, grad.3, data.1, data.2)
devtools::load_all(".")
erg=f.test(alpha, grad.1, grad.3, data.1, data.2)
teststat=erg[1]
q=erg[2]
alpha=0.05
grad.3=3
delta.mat=Delta(inv.X.1, inv.X.3)
par.bsp.vergl=KB.poly(alpha, y, grad.3, niter, delta.mat[[1]])
par.bsp.vergl=KB.poly.fast(alpha, length(y), grad.3, niter, delta.mat[[1]], a=0, b=1, ngridpoly = 50)
plot.bsp.vergl=plot.KB.vergl(y, y, grad.3, delta.mat[[1]], beta.1, beta.3, sigma.1, sigma.3,
par.bsp.vergl[[1]], ngrid = length(y))
alpha=0.05
grad.3=3
delta.mat=Delta(inv.X.1, inv.X.3)
par.bsp.vergl=KB.poly.fast(alpha, length(y), grad.3, niter, delta.mat[[1]], a=0, b=1, ngridpoly = 50)
plot.bsp.vergl=plot.KB.vergl(y, y, grad.3, delta.mat[[1]], beta.1, beta.3, sigma.1, sigma.3,
par.bsp.vergl[[1]], ngrid = length(y))
pdf("man/0-Latex/graphics/Beispiel/Bsp-KB-poly-hetero.pdf",
width=10,height=8)
plot(0,0,xlim=c(0,1),ylim=c(min(plot.bsp.vergl[[2]]),max(plot.bsp.vergl[[3]])), xlab="relative Zeit",
ylab="relatives Wachstum")
lines(c(1,0),c(0,0))
curve(fit.1[[2]][1]-fit.3[[2]][1]+(fit.1[[2]][2]-fit.3[[2]][2])*x-fit.3[[2]][3]*x^2-fit.3[[2]][4]*x^3
, add=T)
lines(plot.bsp.vergl[[1]], plot.bsp.vergl[[2]], lty=1, lwd=2)
lines(plot.bsp.vergl[[1]], plot.bsp.vergl[[3]], lty=1, lwd=2)
dev.off()
time=1:length(y)/length(y)
Y.gls.1 <- gls(y~time,correlation=corAR1())
phi.1=-0.938988
fit.hetero.1=ar.1(grad.1,y,phi.1)
y.trafo=fit.hetero.1[[4]]
pdf("man/0-Latex/graphics/Beispiel/Bsp-Reg-AR.pdf",
width=10,height=8)
plot(x,y, xlab="relative Zeit", ylab="relatives Wachstum")
curve(fit.hetero.1[[2]][1]+fit.hetero.1[[2]][2]*x,add=T, lwd=2, lty="dashed")
abline(a=fit.1[[2]][1],b=fit.1[[2]][2],lwd=2)
curve(fit.3[[2]][1]+fit.3[[2]][2]*x+fit.3[[2]][3]*x^2+fit.3[[2]][4]*x^3, add=T, lwd=2,
lty="dotted")
legend(x="topleft", legend=c("Grad 1", "Grad 3", "AR Grad 1"),
col=c("black", "black", "black"),cex=0.7, lty=c("solid", "dotted", "dashed"))
dev.off()
beta.hetero.1=fit.hetero.1[[2]]
sigma.hetero.1=fit.hetero.1[[3]]
X.mat.hetero.1=fit.hetero.1[[1]]
inv.X.hetero.1 <- solve(t(X.mat.hetero.1) %*% X.mat.hetero.1)
alpha=0.05
par.bsp.poly.hetero=KB.poly(alpha, y.trafo, 1, niter, inv.X.hetero.1)
par.bsp.poly.hetero=KB.poly.fast(alpha, length(y.trafo), 1, niter, inv.X.hetero.1, a=0, b=1, ngridpoly = 50)
plot.KB.poly.hetero=plot.KB(length(y), 1, inv.X.1, beta.1, sigma.1, par.bsp.poly.hetero[[1]],
ngrid = length(y))
pdf("man/0-Latex/graphics/Beispiel/Bsp-KB-poly-AR.pdf",
width=10,height=8)
plot(0,0,xlim=c(0,1),ylim=c(min(plot.KB.poly.hetero[[2]]),max(plot.KB.poly.hetero[[3]])),
xlab="relative Zeit", ylab="relatives Wachstum")
points(x,y)
curve(fit.1[[2]][1]+fit.1[[2]][2]*x, add=T)
curve(fit.hetero.1[[2]][1]+fit.hetero.1[[2]][2]*x,lty="dashed" ,add=T)
lines(plot.KB.poly[[1]], plot.KB.poly[[2]], lty="solid")
lines(plot.KB.poly[[1]], plot.KB.poly[[3]], lty="solid")
lines(plot.KB.minmax[[1]], plot.KB.minmax[[2]], lty="dotted")
lines(plot.KB.minmax[[1]], plot.KB.minmax[[3]], lty="dotted")
lines(plot.KB.poly[[1]], plot.KB.poly[[2]], lty="dashed")
lines(plot.KB.poly[[1]], plot.KB.poly[[3]], lty="dashed")
lines(plot.KB.poly.hetero[[1]], plot.KB.poly.hetero[[2]], lty=4)
lines(plot.KB.poly.hetero[[1]], plot.KB.poly.hetero[[3]], lty=4)
legend(x="topleft", legend=c("R", "[0,1]", "Polynom", "AR"), cex=0.7, lty=1:4)
dev.off()
time=1:length(y)/length(y)
Y.gls.3 <- gls(y~time+I(time^2)+I(time^3),correlation=corAR1())
phi.3=-0.9715946
fit.hetero.3=ar.1(3,y,phi.3)
beta.hetero.3=fit.hetero.3[[2]]
sigma.hetero.3=fit.hetero.3[[3]]
X.mat.hetero.3=fit.hetero.3[[1]]
inv.X.hetero.3 <- solve(t(X.mat.hetero.3) %*% X.mat.hetero.3)
alpha=0.05
delta.mat.hetero=Delta(inv.X.hetero.1, inv.X.hetero.3)
par.bsp.vergl.hetero=KB.poly(alpha, y.trafo, 3, niter, delta.mat.hetero[[1]])
par.bsp.vergl.hetero=KB.poly.fast(alpha, length(y.trafo), 3, niter, delta.mat.hetero[[1]], a=0, b=1,
ngridpoly = length(y))
plot.bsp.vergl.hetero=plot.KB.vergl(y.trafo, y.trafo, 3, delta.mat.hetero[[1]], beta.hetero.1,
beta.hetero.3, sigma.hetero.1, sigma.hetero.3,
par.bsp.vergl.hetero[[1]])
plot.bsp.vergl.hetero=plot.KB.vergl(y.trafo, y.trafo, 3, delta.mat.hetero[[1]], beta.hetero.1,
beta.hetero.3, sigma.hetero.1, sigma.hetero.3,
par.bsp.vergl.hetero[[1]], ngrid = length(y))
pdf("man/0-Latex/graphics/Beispiel/Bsp-KB-poly-hetero-AR.pdf",
width=10,height=8)
plot(0,0,xlim=c(0,1),ylim=c(min(plot.bsp.vergl.hetero[[2]]),max(plot.bsp.vergl.hetero[[3]])),
xlab="relative Zeit", ylab="relatives Wachstum")
lines(c(1,0),c(0,0))
curve(fit.hetero.1[[2]][1]-fit.hetero.3[[2]][1]+(fit.hetero.1[[2]][2]-fit.hetero.3[[2]][2])*x-fit.hetero.3[[2]][3]*x^2-fit.hetero.3[[2]][4]*x^3,
col="red", add=T)
lines(plot.bsp.vergl.hetero[[1]], plot.bsp.vergl.hetero[[2]], col="black")
lines(plot.bsp.vergl.hetero[[1]], plot.bsp.vergl.hetero[[3]], col="black")
dev.off()
par=c(par.bsp.R[[1]], par.bsp.minmax[[1]], par.bsp.poly[[1]], par.bsp.poly.hetero[[1]])
par.vergl=c(par.bsp.vergl[[1]], par.bsp.vergl.hetero[[1]])
simulation=c(seed.1, nobs, beta, phi, sigma, grad, max(y.raw))
kapitel.1=c(grad.1, beta.1, sigma.1, par.bsp.R, par.bsp.minmax, par.bsp.poly)
kapitel.2=c(grad.3, beta.3, sigma.3, erg, teststat, par.bsp.vergl)
kapitel.4=c(beta.hetero.1, sigma.hetero.1, phi.1, par.bsp.poly.hetero, beta.hetero.3, sigma.hetero.3, phi.3,
par.bsp.vergl.hetero)
source('~/Dokumente/R/07-Bachelorarbeit-Konfidenzbaender/KBminmaxpoly/man/Beispiel.R')
time=0:(nobs-1)/(nobs-1)
time.2=time^2
time.3=time^3
time.4=time^4
time.5=time^5
time+I(time^2)+I(time^3)+I(time^4)+I(time^5)
?poly
poly(time, degree=5, raw=T)
poly(time, degree=5, raw=T)[1]
poly(time, degree=5, raw=T)[[1]]
poly(time, degree=5, raw=T)
typeof(poly(time, degree=5, raw=T))
Y.gls <- gls(Y.10~time+I(time^2)+I(time^3)+I(time^4)+I(time^5),correlation=corAR1())
time
length(time)
length(Y.10)
nobs = length(Y.10)
time=0:(nobs-1)/(nobs-1)
time.2=time^2
time.3=time^3
time.4=time^4
time.5=time^5
Y.gls <- gls(Y.10~time+I(time^2)+I(time^3)+I(time^4)+I(time^5),correlation=corAR1())
Y.gls
Y.gls <- gls(Y.10~poly(time, degree = 5, raw = T),correlation=corAR1())
Y.gls <- gls(Y.10~time+I(time^2)+I(time^3)+I(time^4)+I(time^5),correlation=corAR1())
time+I(time^2)+I(time^3)+I(time^4)+I(time^5)
length(time+I(time^2)+I(time^3)+I(time^4)+I(time^5))
poly(time, degree = 5, raw = T)
length(poly(time, degree = 5, raw = T))
time+I(time^2)+I(time^3)+I(time^4)+I(time^5)
Y.10
?gls
poly(time, degree = 5, raw = T)
length(Y.10)
Y.gls <- lm(Y.10~poly(time, degree = 5, raw = T),correlation=corAR1())
Y.gls <- lm(Y.10~poly(time, degree = 5, raw = T))
Y.gls
time+I(time^2)+I(time^3)+I(time^4)+I(time^5)
time.erg = rep(0, nobs)
for(i in 1:degree){time.erg = time.erg + time^i}
degree = 5
for(i in 1:degree){time.erg = time.erg + time^i}
time+I(time^2)+I(time^3)+I(time^4)+I(time^5)=time.erg
time+I(time^2)+I(time^3)+I(time^4)+I(time^5)==time.erg
Y.gls <- gls(Y.10~time.erg,correlation=corAR1())
data.set=Y.10
degree=5
graphicspath="graphics/Stammzellen-10kPa/10kPa-method.pdf"
nobs = length(data.set)
time=0:(nobs-1)/(nobs-1)
time.erg = rep(0, nobs)
for(i in 1:degree){time.erg = time.erg + time^i}
Y.gls <- gls(data.set~time.erg,correlation=corAR1())
beta=Y.gls$coefficients
sigma=Y.gls$sigma
X=matrix(data=NA,nrow=nobs,ncol=(degree+1))
for(j in 1:nobs){
for(i in 1:(degree+1)){X[j,i]=x[j]^(i-1)}
}
X=matrix(data=NA,nrow=nobs,ncol=(degree+1))
for(j in 1:nobs){
for(i in 1:(degree+1)){X[j,i]=time[j]^(i-1)}
}
X.mat=t(X) %*% X
inv.X=solve(X.mat)
alpha=0.05
niter=50
par.KB.R <- KB.R(alpha, Y, degree, inv.X)
par.KB.R <- KB.R(alpha, Y.10, degree, inv.X)
par.KB.minmax <- KB.minmax(alpha, Y.10, degree, niter, inv.X, a=0, b=1)
par.KB.poly <- KB.poly.fast(alpha, length(Y.10), degree, niter, inv.X, a=0, b=1, ngridpoly = length(Y.10))
plot.KB.R=plot.KB(Y, degree, inv.X, beta, sigma, par.KB.R[[1]])
plot.KB.R=plot.KB(data.set, degree, inv.X, beta, sigma, par.KB.R[[1]], ngrid = length(data.set))
plot.KB.R=plot.KB(length(data.set), degree, inv.X, beta, sigma, par.KB.R[[1]], ngrid = length(data.set))
beta
?model.matrix()
I(time)
?I
data.set=Y.10
degree=5
graphicspath="graphics/Stammzellen-10kPa/10kPa-method.pdf"
nobs = length(data.set)
time=0:(nobs-1)/(nobs-1)
time.2=time^2
time.3=time^3
time.4=time^4
time.5=time^5
Y.gls <- gls(data.set ~ time+time.2+time.3+time.4+time.5, correlation=corAR1())
beta=Y.gls$coefficients
sigma=Y.gls$sigma
beta
X=matrix(data=NA,nrow=nobs,ncol=(degree+1))
for(j in 1:nobs){
for(i in 1:(degree+1)){X[j,i]=time[j]^(i-1)}
}
X.mat=t(X) %*% X
inv.X=solve(X.mat)
alpha=0.05
niter=50
par.KB.R <- KB.R(alpha, data.set, degree, inv.X)
par.KB.minmax <- KB.minmax(alpha, data.set, degree, niter, inv.X, a=0, b=1)
par.KB.poly <- KB.poly.fast(alpha, length(data.set), degree, niter, inv.X, a=0, b=1,
ngridpoly = length(data.set))
plot.KB.R=plot.KB(length(data.set), degree, inv.X, beta, sigma, par.KB.R[[1]], ngrid = length(data.set))
plot.KB.minmax=plot.KB(length(data.set), degree, inv.X, beta, sigma, par.KB.minmax[[1]],
ngrid = length(data.set))
plot.KB.poly.fast=plot.KB(length(data.set), degree, inv.X, beta, sigma, par.KB.poly[[1]],
ngrid = length(data.set))
pdf(graphicspath, width = 10, height = 8)
pdf("graphics/Stammzellen-10kPa/10kPa-method.pdf", width = 10, height = 8)
pdf("man/0-Latex/graphics/Stammzellen-10kPa/10kPa-method.pdf", width = 10, height = 8)
pdf(graphicspath, width = 10, height = 8)
graphicspath="man/0-Latex/graphics/Stammzellen-10kPa/10kPa-method.pdf"
pdf(graphicspath, width = 10, height = 8)
time=1:144/144
plot(0,0,xlim=c(0,1),ylim=c(min(plot.KB.R[[2]]),max(plot.KB.R[[3]])), xlab="relative Zeit",
ylab="relativer Unterschied")
lines(time,Y)
curve(par.ar.1[[2]][1,1]+par.ar.1[[2]][2,1]*x+par.ar.1[[2]][3,1]*x^2+par.ar.1[[2]][4,1]*x^3+par.ar.1[[2]][5,1]*x^4+par.ar.1[[2]][6,1]*x^5,col="red", add=T)
lines(time,data.set)
curve(par.ar.1[[2]][1,1]+par.ar.1[[2]][2,1]*x+par.ar.1[[2]][3,1]*x^2+par.ar.1[[2]][4,1]*x^3+par.ar.1[[2]][5,1]*x^4+par.ar.1[[2]][6,1]*x^5,col="red", add=T)
beta[1]
beta[5]
beta[6]
lines(time,data.set)
curve(beta[1]+beta[2]*x+beta[3]*x^2+beta[4]*x^3+beta[5]*x^4+beta[6]*x^5, add=T)
lines(plot.KB.R[[1]], plot.KB.R[[2]], col="green", lty="solid")
lines(plot.KB.R[[1]], plot.KB.R[[3]], col="green", lty="solid")
lines(plot.KB.minmax[[1]], plot.KB.minmax[[2]], col="blue", lty="dotted")
lines(plot.KB.minmax[[1]], plot.KB.minmax[[3]], col="blue", lty="dotted")
lines(plot.KB.minmax[[1]], plot.KB.poly[[2]], col="chocolate", lty="dashed")
plot.KB.poly.fast=plot.KB(length(data.set), degree, inv.X, beta, sigma, par.KB.poly[[1]],
ngrid = length(data.set))
plot.KB.poly=plot.KB(length(data.set), degree, inv.X, beta, sigma, par.KB.poly[[1]],
ngrid = length(data.set))
lines(plot.KB.minmax[[1]], plot.KB.poly[[2]], col="chocolate", lty="dashed")
lines(plot.KB.minmax[[1]], plot.KB.poly[[3]], col="chocolate", lty="dashed")
legend(x="topleft", legend=c("KB R", "KB minmax", "KB minmax poly"),
col=c("green", "blue", "chocolate"),cex=0.5, lty=c("solid", "dotted", "dashed"))
Plot.estimation.methods = function(data.set, degree, graphicspath){
# do the estimation
nobs = length(data.set)
time=0:(nobs-1)/(nobs-1)
time.2=time^2
time.3=time^3
time.4=time^4
time.5=time^5
#time.erg = rep(0, nobs)
#for(i in 1:degree){time.erg = I(time) + I(time^i)}
Y.gls <- gls(data.set ~ time+time.2+time.3+time.4+time.5, correlation=corAR1())
beta=Y.gls$coefficients
sigma=Y.gls$sigma
# do the model generation
X=matrix(data=NA,nrow=nobs,ncol=(degree+1))
for(j in 1:nobs){
for(i in 1:(degree+1)){X[j,i]=time[j]^(i-1)}
}
X.mat=t(X) %*% X
inv.X=solve(X.mat)
# initialize fixed values
alpha=0.05
niter=50
# kritische Werte bestimmen
# alpha, data, grad, inv.X
par.KB.R <- KB.R(alpha, data.set, degree, inv.X)
# alpha, y, grad, niter, inv.X, a, b
par.KB.minmax <- KB.minmax(alpha, data.set, degree, niter, inv.X, a=0, b=1)
# alpha, nobs, grad, niter, inv.X, a, b, ngridpoly
par.KB.poly <- KB.poly.fast(alpha, length(data.set), degree, niter, inv.X, a=0, b=1,
ngridpoly = length(data.set))
# Konfidenzb?nder berechnen
# nobs, grad, inv.X, beta, sigma, factor, ngrid
plot.KB.R=plot.KB(length(data.set), degree, inv.X, beta, sigma, par.KB.R[[1]], ngrid = length(data.set))
plot.KB.minmax=plot.KB(length(data.set), degree, inv.X, beta, sigma, par.KB.minmax[[1]],
ngrid = length(data.set))
plot.KB.poly=plot.KB(length(data.set), degree, inv.X, beta, sigma, par.KB.poly[[1]],
ngrid = length(data.set))
#########################################
# plot der Daten
pdf(graphicspath, width = 10, height = 8)
time=1:144/144
plot(0,0,xlim=c(0,1),ylim=c(min(plot.KB.R[[2]]),max(plot.KB.R[[3]])), xlab="relative Zeit",
ylab="relativer Unterschied")
lines(time,data.set)
curve(beta[1]+beta[2]*x+beta[3]*x^2+beta[4]*x^3+beta[5]*x^4+beta[6]*x^5, add=T)
lines(plot.KB.R[[1]], plot.KB.R[[2]], col="green", lty="solid")
lines(plot.KB.R[[1]], plot.KB.R[[3]], col="green", lty="solid")
lines(plot.KB.minmax[[1]], plot.KB.minmax[[2]], col="blue", lty="dotted")
lines(plot.KB.minmax[[1]], plot.KB.minmax[[3]], col="blue", lty="dotted")
lines(plot.KB.minmax[[1]], plot.KB.poly[[2]], col="chocolate", lty="dashed")
lines(plot.KB.minmax[[1]], plot.KB.poly[[3]], col="chocolate", lty="dashed")
legend(x="topleft", legend=c("KB R", "KB minmax", "KB minmax poly"),
col=c("green", "blue", "chocolate"),cex=0.5, lty=c("solid", "dotted", "dashed"))
}
devtools::load_all(".")
Plot.estimation.methods(Y.10, 5, "man/0-Latex/graphics/Stammzellen-10kPa/10kPa-method.pdf")
Plot.estimation.methods(Y.30, 5, "man/0-Latex/graphics/Stammzellen-30kPa/30kPa-method.pdf")
devtools::load_all(".")
data.set=Y.10
degree=5
graphicspath="man/0-Latex/graphics/Stammzellen-10kPa/10kPa-poly.pdf"
nobs = length(data.set)
data.set=Y.10
degree=5
nobs = length(data.set)
time=0:(nobs-1)/(nobs-1)
time.2=time^2
time.3=time^3
time.4=time^4
time.5=time^5
time.6=time^6
Y.gls.4 <- gls(data.set ~ time+I(time^2)+I(time^3)+I(time^4), correlation=corAR1())
Y.gls.5 <- gls(data.set ~ time+I(time^2)+I(time^3)+I(time^4)+I(time^5), correlation=corAR1())
Y.gls.6 <- gls(data.set ~ time+I(time^2)+I(time^3)+I(time^4)+I(time^5)+I(time^6), correlation=corAR1())
pdf(graphicspath, width = 10, height = 8)
time=1:144/144
plot(time, data.set, type="l", xlab="relative Zeit", ylab="relatives Wachstum")
curve(Y.gls.4$coefficients[1]+Y.gls.4$coefficients[2]*x+Y.gls.4$coefficients[3]*x^2+
Y.gls.4$coefficients[4]*x^3+Y.gls.4$coefficients[5]*x^4, add=T, lwd=2, lty="solid")
curve(Y.gls.5$coefficients[1]+Y.gls.5$coefficients[2]*x+Y.gls.5$coefficients[3]*x^2+
Y.gls.5$coefficients[4]*x^3+Y.gls.5$coefficients[5]*x^4+Y.gls.5$coefficients[6]*x^5,
add=T, lwd=2, lty="dotted")
curve(Y.gls.6$coefficients[1]+Y.gls.6$coefficients[2]*x+Y.gls.6$coefficients[3]*x^2+
Y.gls.6$coefficients[4]*x^3+Y.gls.6$coefficients[5]*x^4+Y.gls.6$coefficients[6]*x^5+
Y.gls.6$coefficients[7]*x^6, add=T,
lwd=2, lty="dashed")
legend(x="topleft", legend=c("Grad 4", "Grad 5", "Grad 6"),
col=c("red", "green", "blue"),cex=0.5, lty=c("solid", "dotted", "dashed"))
dev.off()
Plot.degrees = function(data.set, degree, graphicspath){
# Parameter, beta und sigma, bestimmen
nobs = length(data.set)
time=0:(nobs-1)/(nobs-1)
time.2=time^2
time.3=time^3
time.4=time^4
time.5=time^5
time.6=time^6
Y.gls.4 <- gls(data.set ~ time+I(time^2)+I(time^3)+I(time^4), correlation=corAR1())
Y.gls.5 <- gls(data.set ~ time+I(time^2)+I(time^3)+I(time^4)+I(time^5), correlation=corAR1())
Y.gls.6 <- gls(data.set ~ time+I(time^2)+I(time^3)+I(time^4)+I(time^5)+I(time^6), correlation=corAR1())
######################################
# Graphik erzeugen
pdf(graphicspath, width = 10, height = 8)
time=1:144/144
plot(time, data.set, type="l", xlab="relative Zeit", ylab="relatives Wachstum")
curve(Y.gls.4$coefficients[1]+Y.gls.4$coefficients[2]*x+Y.gls.4$coefficients[3]*x^2+
Y.gls.4$coefficients[4]*x^3+Y.gls.4$coefficients[5]*x^4, add=T, lwd=2, lty="solid")
curve(Y.gls.5$coefficients[1]+Y.gls.5$coefficients[2]*x+Y.gls.5$coefficients[3]*x^2+
Y.gls.5$coefficients[4]*x^3+Y.gls.5$coefficients[5]*x^4+Y.gls.5$coefficients[6]*x^5,
add=T, lwd=2, lty="dotted")
curve(Y.gls.6$coefficients[1]+Y.gls.6$coefficients[2]*x+Y.gls.6$coefficients[3]*x^2+
Y.gls.6$coefficients[4]*x^3+Y.gls.6$coefficients[5]*x^4+Y.gls.6$coefficients[6]*x^5+
Y.gls.6$coefficients[7]*x^6, add=T,
lwd=2, lty="dashed")
legend(x="topleft", legend=c("Grad 4", "Grad 5", "Grad 6"),
col=c("red", "green", "blue"),cex=0.5, lty=c("solid", "dotted", "dashed"))
dev.off()
}
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
Plot.estimation.methods(Y.30, 5, "man/0-Latex/graphics/Stammzellen-30kPa/30kPa-method.pdf")
pdf("man/0-Latex/graphics/Stammzellen-30kPa/30kPa-data.pdf")
plot(time, Y.30, type="l", main="30 kPa", xlab="relative Zeit", ylab="relatives Wachstum")
dev.off()
dev.off()
Plot.degrees(Y.10, 5, "man/0-Latex/graphics/Stammzellen-10kPa/10kPa-poly.pdf")
Plot.degrees(Y.30, 5, "man/0-Latex/graphics/Stammzellen-30kPa/30kPa-poly.pdf")
Plot.degrees(Y.10, 5, "man/0-Latex/graphics/Stammzellen-10kPa/10kPa-poly.pdf")
