lines(x, plot.KB.R[[2]], lty="solid", lwd=3)
lines(x, plot.KB.R[[3]], lty="solid", lwd=3)
legend(x="legendplace", legend=c("x.2 %*% beta.2", "Konfidenzband", "Nullfunktion"),
col=c("black", "black", "black"),cex=2, lwd=3, lty=c("solid", "dashed", "dotted"))
legend(x=legendplace, legend=c("x.2 %*% beta.2", "Konfidenzband", "Nullfunktion"),
col=c("black", "black", "black"),cex=2, lwd=3, lty=c("solid", "dashed", "dotted"))
devtools::load_all(".")
source('~/Dokumente/R/07-Bachelorarbeit-Konfidenzbaender/KBminmaxpoly/man/stem-data-pruef.R')
plot.KB.R[[2]][nobs]
plot.KB.R[[3]]
plot.KB.R[[3]][nobs]
legendplace
if (plot.KB.R[[2]][nobs] > 0 && plot.KB.R[[3]][nobs] > 0)
{legendplace="topleft"}else
if (plot.KB.R[[2]][nobs] < 0 && plot.KB.R[[3]][nobs] < 0)
{legendplace="bottomleft"}else
{legendplace="bottomleft"}
legendplace
if (plot.KB.R[[2]][nobs] > 0 && plot.KB.R[[3]][nobs] > 0)
{legendplace="topleft"}else
if (plot.KB.R[[2]][nobs] < 0 && plot.KB.R[[3]][nobs] < 0)
{legendplace="bottomleft"}else
{legendplace="bottomleft"}
devtools::load_all(".")
source('~/Dokumente/R/07-Bachelorarbeit-Konfidenzbaender/KBminmaxpoly/man/stem-data-pruef.R')
if (plot.KB.R[[2]][nobs] > 0 && plot.KB.R[[3]][nobs] > 0)
{legendplace="topleft"}else
if (plot.KB.R[[2]][nobs] < 0 && plot.KB.R[[3]][nobs] < 0)
{legendplace="bottomleft"}else if(data == "Y.30" && k == 2)
{legendplace="toprightleft"}else
{legendplace="bottomleft"}
devtools::load_all(".")
source('~/Dokumente/R/07-Bachelorarbeit-Konfidenzbaender/KBminmaxpoly/man/stem-data-pruef.R')
devtools::load_all(".")
source('~/Dokumente/R/07-Bachelorarbeit-Konfidenzbaender/KBminmaxpoly/man/stem-data-pruef.R')
source('~/Dokumente/R/07-Bachelorarbeit-Konfidenzbaender/KBminmaxpoly/man/Beispiel-R.R')
devtools::load_all(".")
source('~/Dokumente/R/07-Bachelorarbeit-Konfidenzbaender/KBminmaxpoly/man/Beispiel-R.R')
library(mvtnorm)
library(nlme)
source('~/Dokumente/R/07-Bachelorarbeit-Konfidenzbaender/KBminmaxpoly/man/Beispiel-R.R')
beta
beta.1
beta.3
sigma.1
sigma.3
par.bsp.R
par.bsp.minmax
par.bsp.poly
source('~/Dokumente/R/07-Bachelorarbeit-Konfidenzbaender/KBminmaxpoly/man/Beispiel-AR.R')
source('~/Dokumente/R/07-Bachelorarbeit-Konfidenzbaender/KBminmaxpoly/man/Beispiel-AR.R')
seed.1=100
set.seed(seed.1)
grad=3
grad.1=3
grad.3=4
nobs=50
beta.true=c(10,5,-4,7)
sigma.true=1 #0.007545373
phi.true=0.001 #0.8225374  # bestimmt die korrelation
x.raw=c(0:(nobs-1))
x=x.raw/max(x.raw)
X=matrix(data=NA,nrow=nobs,ncol=(grad+1))
for(j in 1:nobs){
for(i in 1:(grad+1)){X[j,i]=x[j]^(i-1)}
}
X.mat=t(X) %*% X
X.mat.inv.1=solve(X.mat)
X.3=matrix(data=NA,nrow=nobs,ncol=(grad.3+1))
for(j in 1:nobs){
for(i in 1:(grad.3+1)){X.3[j,i]=x[j]^(i-1)}
}
X.mat.3=t(X.3) %*% X.3
X.mat.inv.3=solve(X.mat.3)
alpha=0.05
niter=100
ngrid=nobs
a=0 # diese Werte definieren A
b=1
time=0:(nobs-1)/(nobs-1)
time.2=time^2
time.3=time^3
time.4=time^4
alpha=0.05
ngrid=nobs
Upsilon = Upsilon_fun(phi.true, length(x.raw))[[1]]
Upsilon=Upsilon*sigma.true
e=rmvnorm(1,mean=rep(0,length(x.raw)),Upsilon)
y.raw=X %*% beta.true + t(e)
pdf("man/0-Latex/graphics/Beispiel/data-raw-AR.pdf",
width=10,height=8)
plot(x.raw,y.raw, xlab="Zeit", ylab="Wachstum", pch=1, cex=2, lwd=3, cex.axis=2, cex.lab=2)
dev.off()
y=y.raw/max(y.raw)
grad.1=3
Y.gls.1 <- gls(y~time+time.2+time.3,correlation=corAR1())
beta.1=Y.gls.1$coefficients
sigma.1=Y.gls.1$sigma
grad.3=4
Y.gls.3 <- gls(y~time+time.2+time.3+time.4,correlation=corAR1())
beta.3=Y.gls.3$coefficients
sigma.3=Y.gls.3$sigma
pdf("man/0-Latex/graphics/Beispiel/Bsp-Reg-AR.pdf",
width=10,height=8)
plot(x,y, xlab="relative Zeit", ylab="relatives Wachstum", cex=2, lwd=3, cex.axis=2, cex.lab=2)
curve(beta.1[1]+beta.1[2]*x+beta.1[3]*x^2+beta.1[4]*x^3,add=T, cex=2, lwd=3)
curve(beta.3[1]+beta.3[2]*x+beta.3[3]*x^2+beta.3[4]*x^3+beta.3[5]*x^4, add=T,
cex=2, lwd=3, lty="dashed")
legend(x="topleft", legend=c("Grad 3", "Grad 4"),
col=c("black", "black"),cex=2, lwd=3, lty=c("solid", "dashed"))
dev.off()
niter=5000
par.bsp.poly.1=KB.poly.fast(alpha, length(y), grad = 3, niter, X.mat.inv.1, a=0, b=1, ngridpoly = 100)
plot.KB.poly.1=plot.KB(length(y), grad = 3, X.mat.inv.1, beta.1, sigma.1, par.bsp.poly.1[[1]],
ngrid = length(y))
par.bsp.poly.3=KB.poly.fast(alpha, length(y), grad = 4, niter, X.mat.inv.3, a=0, b=1, ngridpoly = 100)
plot.KB.poly.3=plot.KB(length(y), grad = 4, X.mat.inv.3, beta.3, sigma.3, par.bsp.poly.1[[1]],
ngrid = length(y))
pdf("man/0-Latex/graphics/Beispiel/Bsp-KB-poly-AR.pdf",
width=10,height=8)
plot(0,0,xlim=c(0,1),ylim=c(min(plot.KB.poly.hetero[[2]]),max(plot.KB.poly.hetero[[3]])),
xlab="relative Zeit", ylab="relatives Wachstum", cex=2, lwd=3, cex.axis=2, cex.lab=2)
points(x,y, cex=2, lwd=3)
curve(beta.1[1]+beta.1[2]*x+beta.1[3]*x^2+beta.1[4]*x^3,add=T, cex=2, lwd=3)
curve(beta.3[1]+beta.3[2]*x+beta.3[3]*x^2+beta.3[4]*x^3+beta.3[5]*x^4, add=T,
cex=2, lwd=3, lty="dashed")
lines(plot.KB.poly.1[[1]], plot.KB.poly.1[[2]], lty=1, cex=2, lwd=3)
lines(plot.KB.poly.1[[1]], plot.KB.poly.1[[3]], lty=1, cex=2, lwd=3)
lines(plot.KB.poly.3[[1]], plot.KB.poly.3[[2]], lty="dashed", cex=2, lwd=3)
lines(plot.KB.poly.3[[1]], plot.KB.poly.3[[3]], lty="dashed", cex=2, lwd=3)
legend(x="topleft", legend=c("Grad 3", "Grad 4"),
col=c("black","black"),cex=2, lty=c(1,2), lwd=3)
dev.off()
plot(0,0,xlim=c(0,1),ylim=c(min(plot.KB.poly.3[[2]]),max(plot.KB.poly.3[[3]])),
xlab="relative Zeit", ylab="relatives Wachstum", cex=2, lwd=3, cex.axis=2, cex.lab=2)
points(x,y, cex=2, lwd=3)
dev.off()
dev.off()
dev.off()
plot(0,0,xlim=c(0,1),ylim=c(min(plot.KB.poly.3[[2]]),max(plot.KB.poly.3[[3]])),
xlab="relative Zeit", ylab="relatives Wachstum", cex=2, lwd=3, cex.axis=2, cex.lab=2)
points(x,y, cex=2, lwd=3)
curve(beta.1[1]+beta.1[2]*x+beta.1[3]*x^2+beta.1[4]*x^3,add=T, cex=2, lwd=3)
curve(beta.3[1]+beta.3[2]*x+beta.3[3]*x^2+beta.3[4]*x^3+beta.3[5]*x^4, add=T,
cex=2, lwd=3, lty="dashed")
lines(plot.KB.poly.1[[1]], plot.KB.poly.1[[2]], lty=1, cex=2, lwd=3)
lines(plot.KB.poly.1[[1]], plot.KB.poly.1[[3]], lty=1, cex=2, lwd=3)
lines(plot.KB.poly.3[[1]], plot.KB.poly.3[[2]], lty="dashed", cex=2, lwd=3)
lines(plot.KB.poly.3[[1]], plot.KB.poly.3[[3]], lty="dashed", cex=2, lwd=3)
legend(x="topleft", legend=c("Grad 3", "Grad 4"),
col=c("black","black"),cex=2, lty=c(1,2), lwd=3)
dev.off()
delta.mat.hetero=Delta(X.mat.inv.1, X.mat.inv.3)
par.bsp.vergl.hetero=KB.poly.fast(alpha, length(y), grad = 4, niter, delta.mat.hetero[[1]], a=0, b=1,
ngridpoly = length(y))
plot.bsp.vergl.hetero=plot.KB.vergl(y, y, grad = 4, delta.mat.hetero[[1]], beta.1,
beta.3, sigma.1, sigma.3,
par.bsp.vergl.hetero[[1]], ngrid = length(y))
pdf("man/0-Latex/graphics/Beispiel/Bsp-KB-poly-hetero-AR.pdf",
width=10,height=8)
plot(0,0,xlim=c(0,1),ylim=c(min(plot.bsp.vergl.hetero[[2]]),max(plot.bsp.vergl.hetero[[3]])),
xlab="relative Zeit", ylab="relatives Wachstum", cex=2, lwd=3, cex.axis=2, cex.lab=2)
lines(c(1,0),c(0,0), cex=2, lwd=3)
beta.vergl=c(beta.1,0)-beta.3
lines(time, X.3%*%beta.vergl, cex=2, lwd=3)
lines(plot.bsp.vergl.hetero[[1]], plot.bsp.vergl.hetero[[2]], col="black", cex=2, lwd=3)
lines(plot.bsp.vergl.hetero[[1]], plot.bsp.vergl.hetero[[3]], col="black", cex=2, lwd=3)
dev.off()
par=c( par.bsp.poly.hetero[[1]])
par=c( par.bsp.poly.3[[1]])
par.vergl=c( par.bsp.vergl.3[[1]])
par.vergl=c( par.bsp.vergl.hetero[[1]])
par=c( par.bsp.poly.3[[1]])
source('~/Dokumente/R/07-Bachelorarbeit-Konfidenzbaender/KBminmaxpoly/man/Beispiel-AR.R')
par.bsp.vergl.hetero
beta.1
beta.3
sigma.1
sigma.3
par.bsp.poly.1
par.bsp.poly.3
devtools::load_all(".")
library(nlme)
library(mvtnorm)
sigma.1
par.bsp.R
source('~/Dokumente/R/07-Bachelorarbeit-Konfidenzbaender/KBminmaxpoly/man/Beispiel-R.R')
par.bsp.R
par.bsp.R
par.bsp.minmax
par.bsp.poly
beta.3
sigma.3
teststat
q
par.bsp.vergl
source('~/Dokumente/R/07-Bachelorarbeit-Konfidenzbaender/KBminmaxpoly/man/Beispiel-AR.R')
beta.1
sigma.1
Y.gls.1
beta.1 * max(y.raw)
sigma.1 * max(y.raw)
Y.gls.3
beta.3
sigma.3
Y.gls.3
par.bsp.vergl.hetero
par.bsp.poly.1
devtools::load_all(".")
library(KBminmaxpoly)
devtools::load_all(".")
cov.poly.fast.AR=NA
system.time({cov.poly.fast.AR=Coverage.prob.fun("AR", "minmax-poly-fast", niter = 1000, ngridpoly = 500)})
cov.poly.fast.AR.bekannt=NA
system.time({cov.poly.fast.AR.bekannt=Coverage.prob.fun("AR-bekannt", "minmax-poly-fast",
niter = 1000, ngridpoly = 500)})
source('~/Dokumente/R/07-Bachelorarbeit-Konfidenzbaender/KBminmaxpoly/R/make-test-data-AR.R')
devtools::load_all(".")
Make.data.AR()
library(nlme)
library(mvtnorm)
Make.data.AR()
devtools::load_all(".")
cov.poly.fast.AR=NA
system.time({cov.poly.fast.AR=Coverage.prob.fun("AR", "minmax-poly-fast", niter = 1000, ngridpoly = 500)})
cov.poly.fast.AR.bekannt=NA
system.time({cov.poly.fast.AR.bekannt=Coverage.prob.fun("AR-bekannt", "minmax-poly-fast",
niter = 1000, ngridpoly = 500)})
Coverage.prob.fun("AR-bekannt", "R")
Coverage.prob.fun("AR", "R")
data_AR_true
data_modelAR_estAR_sigma
data_modelAR_estR_sigma
data_modelR_estR_sigma
ntest=1000
set.seed(100)
grad=5
nobs=50
beta.true=c(10,5,-4,7,3,-4)
sigma.true=1 #0.007545373
phi.true=0.001 #0.8225374  # bestimmt die korrelation
x.raw=c(0:(nobs-1))
x=x.raw/max(x.raw)
X=matrix(data=NA,nrow=nobs,ncol=(grad+1))
for(j in 1:nobs){
for(i in 1:(grad+1)){X[j,i]=x[j]^(i-1)}
}
Upsilon = Upsilon_fun(phi.true, nobs)[[1]]
Upsilon= Upsilon * sigma.true
data_AR_true = (X %*% beta.true)
alpha=0.05
niter=100
ngrid=nobs
a=0 # diese Werte definieren A
b=1
time=0:(nobs-1)/(nobs-1)
time.2=time^2
time.3=time^3
time.4=time^4
time.5=time^5
alpha=0.05
ngrid=nobs
X.mat=t(X) %*% X
X.mat.inv=solve(X.mat)
data_AR_test=matrix(rep(rep(NA, ntest), nobs), nrow=nobs)
for(i in 1:ntest)
{
# wahre Werte erzeugen
e=mvtnorm::rmvnorm(1,mean=rep(0,length(x.raw)),Upsilon)
data_AR_test[,i]=X %*% beta.true+ t(e)
}
data_modelAR_estAR_bekannt_beta=matrix(rep(rep(NA, ntest), grad+1), nrow=grad+1)
data_modelAR_estAR_bekannt_sigma=matrix(rep(rep(NA, ntest), 1), nrow=1)
for(i in 1:ntest)
{
# Parameter schÃ¤tzen
y = data_AR_test[,i]
fit.1 = ar.1(grad, y, phi.true)
data_modelAR_estAR_bekannt_beta[,i]=fit.1[[2]]
data_modelAR_estAR_bekannt_sigma[i]=fit.1[[3]]
}
data_modelAR_estAR_beta=matrix(rep(rep(NA, ntest), grad+1), nrow=grad+1)
data_modelAR_estAR_sigma=matrix(rep(rep(NA, ntest), 1), nrow=1)
i=1
data_AR_test[,i]=y
fit.1=gls(y ~ time+time.2+time.3+time.4+time.5,correlation=corAR1())
data_modelAR_estAR_beta[,i]=fit.1$coeff
data_modelAR_estAR_sigma[i]=summary(fit.1)$sigma
fit.1$coeff
summary(fit.1)$sigma
fit.1
Coverage.prob.fun("AR-bekannt", "minmax", niter = 100)
source('~/Dokumente/R/07-Bachelorarbeit-Konfidenzbaender/KBminmaxpoly/R/make-test-data-AR.R')
Make.data.AR()
data_modelAR_estAR_sigma
ntest=1000
set.seed(100)
grad=5
nobs=50
beta.true=c(10,5,-4,7,3,-4)
sigma.true=0.5 #0.007545373
phi.true=0.001 #0.8225374  # bestimmt die korrelation
x.raw=c(0:(nobs-1))
x=x.raw/max(x.raw)
X=matrix(data=NA,nrow=nobs,ncol=(grad+1))
for(j in 1:nobs){
for(i in 1:(grad+1)){X[j,i]=x[j]^(i-1)}
}
Upsilon = Upsilon_fun(phi.true, nobs)[[1]]
Upsilon= Upsilon * sigma.true
data_AR_true = (X %*% beta.true)
alpha=0.05
niter=100
ngrid=nobs
a=0 # diese Werte definieren A
b=1
time=0:(nobs-1)/(nobs-1)
time.2=time^2
time.3=time^3
time.4=time^4
time.5=time^5
alpha=0.05
ngrid=nobs
X.mat=t(X) %*% X
X.mat.inv=solve(X.mat)
data_AR_test=matrix(rep(rep(NA, ntest), nobs), nrow=nobs)
for(i in 1:ntest)
{
# wahre Werte erzeugen
e=mvtnorm::rmvnorm(1,mean=rep(0,length(x.raw)),Upsilon)
data_AR_test[,i]=X %*% beta.true+ t(e)
}
data_modelAR_estAR_bekannt_beta=matrix(rep(rep(NA, ntest), grad+1), nrow=grad+1)
data_modelAR_estAR_bekannt_sigma=matrix(rep(rep(NA, ntest), 1), nrow=1)
for(i in 1:ntest)
{
# Parameter schÃ¤tzen
y = data_AR_test[,i]
fit.1 = ar.1(grad, y, phi.true)
data_modelAR_estAR_bekannt_beta[,i]=fit.1[[2]]
data_modelAR_estAR_bekannt_sigma[i]=fit.1[[3]]
}
data_modelAR_estAR_beta=matrix(rep(rep(NA, ntest), grad+1), nrow=grad+1)
data_modelAR_estAR_sigma=matrix(rep(rep(NA, ntest), 1), nrow=1)
for(i in 1:ntest)
{
# Parameter schÃ¤tzen
data_AR_test[,i]=y
fit.1=gls(y ~ time+time.2+time.3+time.4+time.5,correlation=corAR1())
data_modelAR_estAR_beta[,i]=fit.1$coeff
data_modelAR_estAR_sigma[i]=summary(fit.1)$sigma
}
summary(fit.1)
summary(fit.1)$sigma
support_data_AR <- list(ntest, grad, nobs, beta.true, x, X, sigma.true, phi.true,
alpha, ngrid, X.mat, X.mat.inv, a, b)
names(support_data_AR) <- paste(c("ntest", "grad", "nobs", "beta.true", "x", "X", "sigma.true", "phi.true",
"alpha", "ngrid", "X.mat", "X.mat.inv", "a", "b"), sep = "")
devtools::use_data(data_AR_test, overwrite = T)
devtools::use_data(data_AR_true, overwrite = T)
devtools::use_data(data_modelAR_estAR_beta, overwrite = T)
devtools::use_data(data_modelAR_estAR_sigma, overwrite = T)
devtools::use_data(data_modelAR_estAR_bekannt_beta, overwrite = T)
devtools::use_data(data_modelAR_estAR_bekannt_sigma, overwrite = T)
devtools::use_data(support_data_AR, overwrite = T)
devtools::load_all(".")
data_modelAR_estAR_sigma
data_modelR_estR_sigma
cov.poly.fast.AR=NA
system.time({cov.poly.fast.AR=Coverage.prob.fun("AR", "minmax-poly-fast", niter = 1000, ngridpoly = 500)})
system.time({cov.poly.fast.AR=Coverage.prob.fun("AR", "minmax-poly-fast", niter = 100, ngridpoly = 50)})
system.time({cov.poly.fast.AR=Coverage.prob.fun("AR", "minmax-poly-fast", niter = 10, ngridpoly = 50)})
cov.poly.fast.AR=NA
Coverage.prob.fun("AR", "minmax", niter = 100)
Coverage.prob.fun("AR-bekannt", "minmax", niter = 100)
par.bsp.AR=KB.minmax(support_data_AR$alpha, data_AR_test[,i], support_data_AR$grad , niter,
support_data_AR$X.mat.inv, support_data_AR$a, support_data_AR$b)
i=1
par.bsp.AR=KB.minmax(support_data_AR$alpha, data_AR_test[,i], support_data_AR$grad , niter,
support_data_AR$X.mat.inv, support_data_AR$a, support_data_AR$b)
niter=100
par.bsp.AR=KB.minmax(support_data_AR$alpha, data_AR_test[,i], support_data_AR$grad , niter,
support_data_AR$X.mat.inv, support_data_AR$a, support_data_AR$b)
plot.KB.R=plot.KB(support_data_AR$nobs, support_data_AR$grad, support_data_R$X.mat.inv,
data_modelAR_estAR_bekannt_beta[,i], data_modelAR_estAR_bekannt_sigma[i],
par.bsp.AR[[1]], support_data_AR$ngrid)
par.bsp.AR
par.bsp.R=KB.poly(support_data_AR$alpha, support_data_AR$nobs, support_data_AR$grad,
niter,support_data_AR$X.mat.inv, support_data_AR$a,
support_data_AR$b)
par.bsp.R=KB.poly.fast(support_data_AR$alpha, support_data_AR$nobs, support_data_AR$grad,
niter,support_data_AR$X.mat.inv, support_data_AR$a,
support_data_AR$b, ngridpoly)
ngridpoly=100
par.bsp.R=KB.poly.fast(support_data_AR$alpha, support_data_AR$nobs, support_data_AR$grad,
niter,support_data_AR$X.mat.inv, support_data_AR$a,
support_data_AR$b, ngridpoly)
par.bsp.R
plot.KB.R=plot.KB(support_data_AR$nobs, support_data_AR$grad, support_data_AR$X.mat.inv,
data_modelAR_estAR_bekannt_beta[,i], data_modelAR_estAR_bekannt_sigma[i],
par.bsp.R[[1]], support_data_AR$ngrid)
par.bsp.AR=KB.minmax(support_data_AR$alpha, data_AR_test[,i], support_data_AR$grad , niter,
support_data_AR$X.mat.inv, support_data_AR$a, support_data_AR$b)
plot.KB.R=plot.KB(support_data_AR$nobs, support_data_AR$grad, support_data_AR$X.mat.inv,
data_modelAR_estAR_bekannt_beta[,i], data_modelAR_estAR_bekannt_sigma[i],
par.bsp.R[[1]], support_data_AR$ngrid)
plot.KB.R=plot.KB(support_data_AR$nobs, support_data_AR$grad, support_data_R$X.mat.inv,
data_modelAR_estAR_bekannt_beta[,i], data_modelAR_estAR_bekannt_sigma[i],
par.bsp.AR[[1]], support_data_AR$ngrid)
Coverage.prob.fun("AR-bekannt", "minmax", niter = 100)
par.bsp.AR=KB.minmax(support_data_AR$alpha, data_AR_test[,i], support_data_AR$grad , niter,
support_data_AR$X.mat.inv, support_data_AR$a, support_data_AR$b)
plot.KB.R=plot.KB(support_data_AR$nobs, support_data_AR$grad, support_data_AR$X.mat.inv,
data_modelAR_estAR_bekannt_beta[,i], data_modelAR_estAR_bekannt_sigma[i],
par.bsp.R[[1]], support_data_AR$ngrid)
if(Test.function(support_data_AR$nobs, plot.KB.R[[2]], plot.KB.R[[3]], model.type)==F){
nerfolg=nerfolg-1
}
model.type="AR-bekannt"
if(Test.function(support_data_AR$nobs, plot.KB.R[[2]], plot.KB.R[[3]], model.type)==F){
nerfolg=nerfolg-1
}
nerfolg
nerfolg=1
if(Test.function(support_data_AR$nobs, plot.KB.R[[2]], plot.KB.R[[3]], model.type)==F){
nerfolg=nerfolg-1
}
nerfolg
par.bsp.AR=KB.minmax(support_data_AR$alpha, data_AR_test[,i], support_data_AR$grad , niter,
support_data_AR$X.mat.inv, support_data_AR$a, support_data_AR$b)
plot.KB.R=plot.KB(support_data_AR$nobs, support_data_AR$grad, support_data_AR$X.mat.inv,
data_modelAR_estAR_bekannt_beta[,i], data_modelAR_estAR_bekannt_sigma[i],
par.bsp.R[[1]], support_data_AR$ngrid)
Coverage.prob.fun("AR-bekannt", "minmax", niter = 100)
devtools::load_all(".")
Coverage.prob.fun("AR-bekannt", "minmax", niter = 100)
i
par.bsp.R=KB.poly.fast(support_data_AR$alpha, support_data_AR$nobs, support_data_AR$grad,
niter,support_data_AR$X.mat.inv, support_data_AR$a,
support_data_AR$b, ngridpoly)
par.bsp.R
par.bsp.R=KB.poly.fast(support_data_R$alpha, support_data_R$nobs, support_data_R$grad,
niter,support_data_R$X.mat.inv, support_data_R$a,
support_data_R$b, ngridpoly)
par.bsp.R
support_data_AR$nobs
support_data_AR$grad
support_data_AR$X.mat.inv
ntest=1000
set.seed(100)
grad=5
nobs=50
beta.true=c(10,5,-4,7,3,-4)
sigma.true=0.5 #0.007545373
phi.true=0.001 #0.8225374  # bestimmt die korrelation
x.raw=c(0:(nobs-1))
x=x.raw/max(x.raw)
X=matrix(data=NA,nrow=nobs,ncol=(grad+1))
for(j in 1:nobs){
for(i in 1:(grad+1)){X[j,i]=x[j]^(i-1)}
}
X
X.mat=t(X) %*% X
X.mat
eigen(X.mat)
X.mat.inv=solve(X.mat)
X.mat.inv
support_data_AR$X.mat.inv
grad=1
X=matrix(data=NA,nrow=nobs,ncol=(grad+1))
for(j in 1:nobs){
for(i in 1:(grad+1)){X[j,i]=x[j]^(i-1)}
}
X
X.mat=t(X) %*% X
X.mat.inv=solve(X.mat)
X.mat.inv
grad=5
X=matrix(data=NA,nrow=nobs,ncol=(grad+1))
for(j in 1:nobs){
for(i in 1:(grad+1)){X[j,i]=x[j]^(i-1)}
}
X.mat=t(X) %*% X
X.mat.inv=solve(X.mat)
X.mat.inv
grad=3
X=matrix(data=NA,nrow=nobs,ncol=(grad+1))
for(j in 1:nobs){
for(i in 1:(grad+1)){X[j,i]=x[j]^(i-1)}
}
X.mat=t(X) %*% X
X.mat.inv=solve(X.mat)
X.mat.inv
grad=6
X=matrix(data=NA,nrow=nobs,ncol=(grad+1))
for(j in 1:nobs){
for(i in 1:(grad+1)){X[j,i]=x[j]^(i-1)}
}
X.mat=t(X) %*% X
X.mat.inv=solve(X.mat)
X.mat.inv
X=matrix(data=NA,nrow=nobs,ncol=(grad+1))
for(j in 1:nobs){
for(i in 1:(grad+1)){X[j,i]=x[j]^(i-1)}
}
X.mat=t(X) %*% X
X.mat
eigen(X.mat)
X.mat %*% X.mat.inv
Make.data.AR()
devtools::load_all(".")
Make.data.AR()
