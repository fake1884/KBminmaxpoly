X.mat.inv=solve(X.mat)
a=0
b=1
k=1
I.tilde=I_tilde(k, grad)[[1]]
V=I.tilde %*% X.mat.inv %*% t(I.tilde)
beta.2=I.tilde %*% beta
beta.2
data_R_pruef_true=x^(grad-k) %*% beta.2
x^(grad-k) %*% beta.2
data_R_pruef_test=matrix(rep(rep(NA, ntest), nobs), nrow=nobs)
for(i in 1:ntest)
{
# wahre Werte erzeugen
e=mvtnorm::rmvnorm(1,mean=rep(0,length(x.raw)),sigma.true[1]*I)
data_R_pruef_test[,i]=X %*% beta + t(e)
}
plot(x, data_R_pruef_test[,1])
plot(x, data_R_pruef_test[,2])
plot(x, x %*% beta)
dim(x)
x
length(x)
plot(x, X %*% beta)
plot(x, data_R_pruef_test[,1])
lines(x, X %*% beta)
data_modelR_pruef_estR_beta=matrix(rep(rep(NA, ntest), grad+1), nrow=grad+1)
data_modelR_pruef_estR_sigma=matrix(rep(rep(NA, ntest), 1), nrow=1)
for(i in 1:ntest)
{
# Parameter schätzen
fit.1=lm(data_R_pruef_test[,i]~poly(x,degree=grad,raw=T))
data_modelR_pruef_estR_beta[,i]=fit.1$coeff
data_modelR_pruef_estR_sigma[i]=summary(fit.1)$sigma
}
lines(x, data_modelR_pruef_estR_beta[,1])
lines(x, data_modelR_pruef_estR_beta[,1])
lines(x, X %*% data_modelR_pruef_estR_beta[,1])
data_modelR_pruef_estR_sigma[i]
grad-k
beta.2
grad-k
devtools::load_all(".")
Coverage.prob.pruef.fun("R-pruef", "R")
Coverage.prob.pruef.fun("R-pruef", "minmax-poly-fast", niter = 5000, ngridpoly = 500)
par.bsp.R=KB.R.pruef(support_data_R_pruef$alpha, support_data_R_pruef$nobs,
support_data_R_pruef$grad, support_data_R_pruef$k)
par.bsp.R
support_data_R_pruef$ngrid
ngrid
Make.data.R.pruef()
support_data_R_pruef$ngrid
Make.data.R.pruef()
support_data_R_pruef$ngrid
support_data_R$ngrid
devtools::load_all(".")
support_data_R_pruef$ngrid
Coverage.prob.pruef.fun("R-pruef", "R")
Coverage.prob.pruef.fun("R-pruef", "minmax-poly-fast", niter = 5000, ngridpoly = 500)
data_modelR_pruef_estR_sigma
data_modelR_pruef_estR_beta
data_modelR_pruef_estR_beta[,i]
data_modelR_pruef_estR_beta[,1]
data_modelR_pruef_estR_beta[,2]
data_modelR_pruef_estR_beta[,3]
data_modelR_pruef_estR_beta[,4]
poly(x,degree=grad,raw=T)
Make.data.R.pruef()
devtools::load_all(".")
i=1
data_modelR_pruef_estR_beta[,i]
data_modelR_pruef_estR_beta[,2]
data_modelR_pruef_estR_beta[,3]
support_data_R_pruef$nobs
devtools::load_all(".")
Make.data.R.pruef()
devtools::load_all(".")
Make.data.R.pruef()
devtools::load_all(".")
support_data_R_pruef$nobs
Coverage.prob.pruef.fun("R-pruef", "R")
Coverage.prob.pruef.fun("R-pruef", "minmax-poly-fast", niter = 5000, ngridpoly = 500)
Coverage.prob.pruef.fun("R-pruef", "minmax-poly-fast", niter = 5000, ngridpoly = 100)
Coverage.prob.pruef.fun("R-pruef", "minmax-poly-fast", niter = 5000, ngridpoly = 50)
Coverage.prob.pruef.fun("R-pruef", "minmax-poly-fast", niter = 5000, ngridpoly = 100)
Coverage.prob.pruef.fun("AR-bekannt-pruef", "R")
Coverage.prob.pruef.fun("AR-bekannt-pruef", "minmax-poly-fast", niter = 100, ngridpoly = 100)
Coverage.prob.pruef.fun("AR-pruef", "R")
Coverage.prob.pruef.fun("AR-pruef", "minmax-poly-fast", niter = 100, ngridpoly = 100)
devtools::load_all(".")
Coverage.prob.pruef.fun("AR-pruef", "R")
Coverage.prob.pruef.fun("AR-pruef", "minmax-poly-fast", niter = 100, ngridpoly = 100)
Coverage.prob.pruef.fun("AR-bekannt-pruef", "R")
Coverage.prob.pruef.fun("AR-bekannt-pruef", "minmax-poly-fast", niter = 100, ngridpoly = 100)
devtools::load_all(".")
Make.data.AR.pruef()
library(nlme)
library(mvtnorm)
Make.data.AR.pruef()
ntest=1000
set.seed(100)
grad=3
nobs=50
beta.true=c(10,5,-4,7)#,3,-4
sigma.true=0.007545373
phi.true=0.8225374  # bestimmt die korrelation
x.raw=c(0:(nobs-1))
x=x.raw/max(x.raw)
X=matrix(data=NA,nrow=nobs,ncol=(grad+1))
for(j in 1:nobs){
for(i in 1:(grad+1)){X[j,i]=x[j]^(i-1)}
}
Upsilon = Upsilon_fun(phi.true, nobs)[[1]]
Upsilon= Upsilon * sigma.true
alpha=0.05
niter=100
ngrid=nobs
a=0 # diese Werte definieren A
b=1
time=0:(nobs-1)/(nobs-1)
time.2=time^2
time.3=time^3
time.4=time^4
time.5=time^5
alpha=0.05
ngrid=nobs
X.mat=t(X) %*% X
X.mat.inv=solve(X.mat)
k=1
I.tilde=I_tilde(k, grad)[[1]]
V=I.tilde %*% X.mat.inv %*% t(I.tilde)
beta.2=I.tilde %*% beta.true
beta.2
data_AR_pruef_true = x^(grad-k) %*% beta.2
grad-k
data_AR_pruef_test=matrix(rep(rep(NA, ntest), nobs), nrow=nobs)
for(i in 1:ntest)
{
# wahre Werte erzeugen
e=mvtnorm::rmvnorm(1,mean=rep(0,length(x.raw)),Upsilon)
data_AR_pruef_test[,i]=X %*% beta.true+ t(e)
}
length(x.raw)
data_modelAR_pruef_estAR_bekannt_beta=matrix(rep(rep(NA, ntest), grad+1), nrow=grad+1)
data_modelAR_pruef_estAR_bekannt_sigma=matrix(rep(rep(NA, ntest), 1), nrow=1)
for(i in 1:ntest)
{
# Parameter schätzen
y = data_AR_pruef_test[,i]
fit.1 = ar.1(grad, y, phi.true)
data_modelAR_pruef_estAR_bekannt_beta[,i]=fit.1[[2]]
data_modelAR_pruef_estAR_bekannt_sigma[i]=fit.1[[3]]
}
{
# Parameter schätzen
y = data_AR_pruef_test[,i]
fit.1 = ar.1(grad, y, phi.true)
data_modelAR_pruef_estAR_bekannt_beta[,i]=fit.1[[2]]
data_modelAR_pruef_estAR_bekannt_sigma[i]=fit.1[[3]]
}
data_modelAR_pruef_estAR_beta=matrix(rep(rep(NA, ntest), grad+1), nrow=grad+1)
data_modelAR_pruef_estAR_sigma=matrix(rep(rep(NA, ntest), 1), nrow=1)
for(i in 1:ntest)
{
# Parameter schätzen
y = data_AR_pruef_test[,i]
fit.1 = gls(y ~ time+time.2+time.3+time.4+time.5, correlation=corAR1())
data_modelAR_pruef_estAR_beta[,i]=fit.1$coeff
data_modelAR_pruef_estAR_sigma[i]=summary(fit.1)$sigma
}
y = data_AR_pruef_test[,i]
fit.1 = gls(y ~ time+time.2+time.3+time.4+time.5, correlation=corAR1())
data_modelAR_pruef_estAR_beta[,i]=fit.1$coeff
fit.1$coeff
fit.1 = gls(y ~ time+time.2+time.3, correlation=corAR1())
fit.1$coeff
data_modelAR_pruef_estAR_beta[,i]=fit.1$coeff
data_modelAR_pruef_estAR_sigma[i]=summary(fit.1)$sigma
{
# Parameter schätzen
y = data_AR_pruef_test[,i]
fit.1 = gls(y ~ time+time.2+time.3, correlation=corAR1())
data_modelAR_pruef_estAR_beta[,i]=fit.1$coeff
data_modelAR_pruef_estAR_sigma[i]=summary(fit.1)$sigma
}
devtools::load_all(".")
Make.data.AR.pruef()
devtools::load_all(".")
data_modelAR_pruef_estAR_beta[,i]
data_modelAR_pruef_estAR_beta[,1]
data_modelAR_pruef_estAR_beta[,2]
data_modelAR_pruef_estAR_beta[,3]
data_modelAR_pruef_estAR_beta[,4]
devtools::load_all(".")
Make.data.AR.pruef()
devtools::load_all(".")
data_modelAR_pruef_estAR_beta[,i]
data_modelAR_pruef_estAR_beta[,1]
data_modelAR_pruef_estAR_beta[,2]
data_modelAR_pruef_estAR_beta[,3]
data_modelAR_pruef_estAR_beta[,4]
data_modelAR_pruef_estAR_beta[,5]
data_modelAR_pruef_estAR_beta[,55]
Coverage.prob.pruef.fun("AR-pruef", "R")
Coverage.prob.pruef.fun("AR-pruef", "minmax-poly-fast", niter = 100, ngridpoly = 100)
devtools::load_all(".")
Coverage.prob.pruef.fun("AR-pruef", "R")
Coverage.prob.pruef.fun("AR-pruef", "minmax-poly-fast", niter = 100, ngridpoly = 100)
par.bsp.R=KB.R.pruef(support_data_AR_pruef$alpha, support_data_AR_pruef$nobs,
support_data_AR_pruef$grad, support_data_AR_pruef$k)
par.bsp.R
par.bsp.R=KB.poly.fast(support_data_AR_pruef$alpha, support_data_AR_pruef$nobs,
support_data_AR_pruef$k-1,
niter, support_data_AR_pruef$V,
support_data_AR_pruef$a, support_data_AR_pruef$b, ngridpoly)
ngridpoly=100
niter=100
par.bsp.R=KB.poly.fast(support_data_AR_pruef$alpha, support_data_AR_pruef$nobs,
support_data_AR_pruef$k-1,
niter, support_data_AR_pruef$V,
support_data_AR_pruef$a, support_data_AR_pruef$b, ngridpoly)
par.bsp.R
support_data_AR_pruef$V
par.bsp.R=KB.R.pruef(support_data_R_pruef$alpha, support_data_R_pruef$nobs,
support_data_R_pruef$grad, support_data_R_pruef$k)
par.bsp.R
par.bsp.R=KB.R.pruef(support_data_R_pruef$alpha, support_data_R_pruef$nobs,
support_data_R_pruef$grad, support_data_R_pruef$k)
par.bsp.R
par.bsp.R=KB.R.pruef(support_data_AR_pruef$alpha, support_data_AR_pruef$nobs,
support_data_AR_pruef$grad, support_data_AR_pruef$k)
par.bsp.R
plot.KB.R=plot.KB.pruef( nobs = support_data_AR_pruef$nobs,
grad = support_data_AR_pruef$grad,
inv.X = support_data_AR_pruef$X.mat.inv,
beta = data_modelAR_pruef_estAR_beta[,i],
sigma = data_modelAR_pruef_estAR_sigma[i],
factor = par.bsp.R[[1]], k = support_data_AR_pruef$k,
ngrid = support_data_AR_pruef$ngrid)
i=1
plot.KB.R=plot.KB.pruef( nobs = support_data_AR_pruef$nobs,
grad = support_data_AR_pruef$grad,
inv.X = support_data_AR_pruef$X.mat.inv,
beta = data_modelAR_pruef_estAR_beta[,i],
sigma = data_modelAR_pruef_estAR_sigma[i],
factor = par.bsp.R[[1]], k = support_data_AR_pruef$k,
ngrid = support_data_AR_pruef$ngrid)
plot.KB.R
x
ntest=1000
set.seed(100)
grad=3
nobs=50
beta.true=c(10,5,-4,7)#,3,-4
sigma.true=0.007545373
phi.true=0.8225374  # bestimmt die korrelation
x.raw=c(0:(nobs-1))
x=x.raw/max(x.raw)
X=matrix(data=NA,nrow=nobs,ncol=(grad+1))
for(j in 1:nobs){
for(i in 1:(grad+1)){X[j,i]=x[j]^(i-1)}
}
Upsilon = Upsilon_fun(phi.true, nobs)[[1]]
Upsilon= Upsilon * sigma.true
alpha=0.05
niter=100
ngrid=nobs
a=0 # diese Werte definieren A
b=1
time=0:(nobs-1)/(nobs-1)
time.2=time^2
time.3=time^3
time.4=time^4
time.5=time^5
alpha=0.05
ngrid=nobs
X.mat=t(X) %*% X
X.mat.inv=solve(X.mat)
k=1
I.tilde=I_tilde(k, grad)[[1]]
V=I.tilde %*% X.mat.inv %*% t(I.tilde)
beta.2=I.tilde %*% beta.true
data_AR_pruef_true = x^(grad-k) %*% beta.2
plot(x, data_AR_pruef_true)
lines(x, plot.KB.R[[2]])
lines(x, plot.KB.R[[3]])
lines(x, plot.KB.R[[1]])
lines(x, X %*% beta.2)
lines(x, x %*% beta.2)
lines(x, t(x) %*% beta.2)
devtools::load_all(".")
Make.data.AR.pruef()
devtools::load_all(".")
Coverage.prob.pruef.fun("AR-pruef", "R")
devtools::load_all(".")
Make.data.AR.pruef()
x.raw=c(0:(nobs-1))
x=x.raw/max(x.raw)
nobs
nobs=200
x.raw=c(0:(nobs-1))
x=x.raw/max(x.raw)
plot(x, x^(grad+1-k) %*% beta.2)
grad=3
k=1
plot(x, x^(grad+1-k) %*% beta.2)
beta.2=7
plot(x, x^(grad+1-k) %*% beta.2)
x
plot(x, x^(grad+1-k) %*% beta.2)
ntest=1000
set.seed(100)
grad=3
nobs=50
beta.true=c(10,5,-4,7)#,3,-4
sigma.true=0.007545373
phi.true=0.8225374  # bestimmt die korrelation
x.raw=c(0:(nobs-1))
x=x.raw/max(x.raw)
X=matrix(data=NA,nrow=nobs,ncol=(grad+1))
for(j in 1:nobs){
for(i in 1:(grad+1)){X[j,i]=x[j]^(i-1)}
}
Upsilon = Upsilon_fun(phi.true, nobs)[[1]]
Upsilon= Upsilon * sigma.true
alpha=0.05
niter=100
ngrid=nobs
a=0 # diese Werte definieren A
b=1
time=0:(nobs-1)/(nobs-1)
time.2=time^2
time.3=time^3
time.4=time^4
time.5=time^5
alpha=0.05
ngrid=nobs
X.mat=t(X) %*% X
X.mat.inv=solve(X.mat)
k=1
I.tilde=I_tilde(k, grad)[[1]]
V=I.tilde %*% X.mat.inv %*% t(I.tilde)
beta.2=I.tilde %*% beta.true
x^(grad+1-k) %*% beta.2
data_AR_pruef_true = x^(grad+1-k) %*% beta.2
plot(x, x^(grad+1-k) %*% beta.2)
ngrid
step <- 1/(ngrid-1)
lower <- rep(NA, nobs)
upper <- rep(NA, nobs)
points = seq(from=0,to=1,by=step)
x=matrix(data=NA, ncol=1, nrow=k)
for(j in 1:k){x[j,]=points[i]^(grad+1-k)}
plot(x, t(x) %*% beta.2)
t(x)
for(i in 1:ngrid)
{
x=matrix(data=NA, ncol=1, nrow=k)
for(j in 1:k){x[j,]=points[i]^(grad+1-k)}
lower[i] <- (t(x) %*% beta.2 - factor * sigma * sqrt(t(x) %*% V %*% x))
upper[i] <- (t(x) %*% beta.2 + factor * sigma * sqrt(t(x) %*% V %*% x))
}
sigma=0.5
for(i in 1:ngrid)
{
x=matrix(data=NA, ncol=1, nrow=k)
for(j in 1:k){x[j,]=points[i]^(grad+1-k)}
lower[i] <- (t(x) %*% beta.2 - factor * sigma * sqrt(t(x) %*% V %*% x))
upper[i] <- (t(x) %*% beta.2 + factor * sigma * sqrt(t(x) %*% V %*% x))
}
factor=2
for(i in 1:ngrid)
{
x=matrix(data=NA, ncol=1, nrow=k)
for(j in 1:k){x[j,]=points[i]^(grad+1-k)}
lower[i] <- (t(x) %*% beta.2 - factor * sigma * sqrt(t(x) %*% V %*% x))
upper[i] <- (t(x) %*% beta.2 + factor * sigma * sqrt(t(x) %*% V %*% x))
}
plot(x, x^(grad+1-k) %*% beta.2)
x.raw=c(0:(nobs-1))
x=x.raw/max(x.raw)
plot(x, x^(grad+1-k) %*% beta.2)
lines(x, lower)
lines(x, upper)
devtools::load_all(".")
Make.data.AR.pruef()
devtools::load_all(".")
Coverage.prob.pruef.fun("AR-pruef", "R")
Coverage.prob.pruef.fun("AR-pruef", "minmax-poly-fast", niter = 100, ngridpoly = 100)
devtools::load_all(".")
Make.data.R.pruef()
devtools::load_all(".")
Coverage.prob.pruef.fun("R-pruef", "R")
Coverage.prob.pruef.fun("R-pruef", "minmax-poly-fast", niter = 5000, ngridpoly = 100)
Coverage.prob.pruef.fun("R-pruef", "minmax-poly-fast", niter = 5000, ngridpoly = 500)
devtools::load_all(".")
Coverage.prob.pruef.fun("R-pruef", "R")
Coverage.prob.pruef.fun("R-pruef", "minmax-poly-fast", niter = 5000, ngridpoly = 500)
par.bsp.R=KB.R.pruef(support_data_R_pruef$alpha, support_data_R_pruef$nobs,
support_data_R_pruef$grad, support_data_R_pruef$k)
par.bsp.R
par.bsp.R=KB.poly.fast(support_data_R_pruef$alpha, support_data_R_pruef$nobs,
support_data_R_pruef$k-1,
niter, support_data_R_pruef$V,
support_data_R_pruef$a, support_data_R_pruef$b, ngridpoly)
ngridpoly=500
niter=1000
par.bsp.R=KB.poly.fast(support_data_R_pruef$alpha, support_data_R_pruef$nobs,
support_data_R_pruef$k-1,
niter, support_data_R_pruef$V,
support_data_R_pruef$a, support_data_R_pruef$b, ngridpoly)
par.bsp.R
devtools::load_all(".")
Make.data.R.pruef()
devtools::load_all(".")
Coverage.prob.pruef.fun("R-pruef", "R")
Coverage.prob.pruef.fun("R-pruef", "minmax-poly-fast", niter = 5000, ngridpoly = 500)
devtools::load_all(".")
Coverage.prob.pruef.fun("R-pruef", "R")
devtools::load_all(".")
library(mvtnorm)
library(nlme)
Make.data.R.pruef()
set.seed(100)
ntest=100
grad=3
nobs=200
beta=c(10,5,-4,7)#,3,-4
x.raw=c(0:(nobs-1))
x=x.raw/max(x.raw)
x.raw
x
X=matrix(data=NA,nrow=nobs,ncol=(grad+1))
for(j in 1:nobs){
for(i in 1:(grad+1)){X[j,i]=x[j]^(i-1)}
}
X
k=1
X[k,]
X[,k]
X[,grad - k]
grad-k
X[,grad]
X[,grad-k:grad]
grad-k
grad
k
k=1
X[,2:3]
X
X[,grad]
k=2
X[,grad-k:grad]
X
X[,grad+1-k:grad+1]
X
X[10:15,grad+1-k:grad+1]
X[10:15,]
grad+1-1
grad+1-k
grad+1
X[10:15,grad+1-k:grad]
X[10:15,grad]
X[10:15]
X[10:15,]
X[10:15,grad+1]
X[10:15,grad:grad+1]
X[10:15,grad]
X[10:15,grad+2-k:grad+1]
X[10:15,(grad+2-k):(grad+1)]
k=1
X[10:15,(grad+2-k):(grad+1)]
devtools::load_all(".")
Make.data.R.pruef()
devtools::load_all(".")
Coverage.prob.pruef.fun("R-pruef", "R")
Coverage.prob.pruef.fun("R-pruef", "minmax-poly-fast", niter = 5000, ngridpoly = 500)
niter=500
ngridpoly=500
niter=5000
par.bsp.R=KB.poly.fast(support_data_R_pruef$alpha, support_data_R_pruef$nobs,
support_data_R_pruef$k-1,
niter, support_data_R_pruef$V,
support_data_R_pruef$a, support_data_R_pruef$b, ngridpoly)
par.bsp.R
data_modelR_pruef_estR_sigma
data_modelR_pruef_estR_beta
data_modelR_pruef_estR_beta[,1]
data_modelR_pruef_estR_beta[,10]
data_modelR_pruef_estR_beta[,100]
data_modelR_pruef_estR_beta[,500]
data_modelR_pruef_estR_beta[,50]
data_modelR_pruef_estR_beta[,60]
Coverage.prob.pruef.fun("AR-pruef", "R")
devtools::load_all(".")
Make.data.AR.pruef()
devtools::load_all(".")
Coverage.prob.pruef.fun("R-pruef", "R")
Coverage.prob.pruef.fun("R-pruef", "minmax-poly-fast", niter = 5000, ngridpoly = 500)
Coverage.prob.pruef.fun("AR-pruef", "R")
Coverage.prob.pruef.fun("AR-pruef", "minmax-poly-fast", niter = 100, ngridpoly = 100)
devtools::load_all(".")
Coverage.prob.pruef.fun("AR-pruef", "R")
data_modelAR_estAR_X_trafo_inv[i]
i=1
data_modelAR_estAR_X_trafo_inv[i]
devtools::load_all(".")
Coverage.prob.pruef.fun("AR-pruef", "R")
Coverage.prob.pruef.fun("AR-pruef", "minmax-poly-fast", niter = 100, ngridpoly = 100)
source('~/Dokumente/R/07-Bachelorarbeit-Konfidenzbaender/KBminmaxpoly/man/Beispiel-R.R')
library(nvtnorm)
library(mvtnorm)
