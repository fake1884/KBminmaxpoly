# feste Werte erzeugen
v=nobs-grad-1
xseq <- seq(a, b, len = ngridpoly + 1) # subdividing the interval [a,b] in ngrid+1 parts
values = rep(NA,(ngridpoly+1)) # mod speichert die Funktionswerte auf [a,b] mit Abstand ngrid
S <- rep(NA, niter)  # lehrer Vektor f?r die Simulationsergebnisse
# Simulation durchf?heren
for(i in 1:niter){
S[i]=S.fun(v,values, xseq)
}
S
ngridpoly=100
niter=100
# feste Werte erzeugen
v=nobs-grad-1
xseq <- seq(a, b, len = ngridpoly + 1) # subdividing the interval [a,b] in ngrid+1 parts
values = rep(NA,(ngridpoly+1)) # mod speichert die Funktionswerte auf [a,b] mit Abstand ngrid
S <- rep(NA, niter)  # lehrer Vektor f?r die Simulationsergebnisse
# Simulation durchf?heren
for(i in 1:niter){
S[i]=S.fun(v,values, xseq)
}
factor <- quantile(S,1-alpha)
factor
niter=50000
# feste Werte erzeugen
v=nobs-grad-1
xseq <- seq(a, b, len = ngridpoly + 1) # subdividing the interval [a,b] in ngrid+1 parts
values = rep(NA,(ngridpoly+1)) # mod speichert die Funktionswerte auf [a,b] mit Abstand ngrid
S <- rep(NA, niter)  # lehrer Vektor f?r die Simulationsergebnisse
# Simulation durchf?heren
for(i in 1:niter){
S[i]=S.fun(v,values, xseq)
}
# kritischen Wert bestimmen
factor <- quantile(S,1-alpha)
factor
ngridpoly
par.bsp.poly=KB.poly.fast(alpha, length(y), grad.1, niter, inv.X.1, a=0, b=1, ngridpoly = 1000)
S.fun = function(v, values, xseq){
# Wert simulieren
sigma.hat = sqrt(rchisq(n=1,df=v)/v)
N = matrix(mvtnorm::rmvnorm(1,mean=rep(0,grad+1),inv.X), ncol=grad+1)
# Berechnug der Maxima
# Bestimmt einfach den Wert von g.fun auf einem Grid auf [0,1] mit Feinheit ngridpoly
g.lapply=function(x){S_fun_cpp(x, grad, sigma.hat, N, inv.X)}
values=rep(NA, length(xseq))
values=sapply(xseq, g.lapply)
# Maximum der Funktion g in dieser Simulation
erg=max(abs(values))
erg
}
par.bsp.poly=KB.poly.fast(alpha, length(y), grad.1, niter, inv.X.1, a=0, b=1, ngridpoly = 1000)
devtools::load_all(".")
par.bsp.poly=KB.poly.fast(alpha, length(y), grad.1, niter, inv.X.1, a=0, b=1, ngridpoly = 1000)
par.bsp.poly=KB.poly.fast(alpha, length(y), grad.1, niter, inv.X.1, a=0, b=1, ngridpoly = 100)
par.bsp.poly
cov.poly.fast.AR=NA
system.time({cov.poly.fast.AR=Coverage.prob.fun("AR", "minmax-poly-fast", niter = 5000, ngridpoly = 100)})
source('~/Dokumente/R/07-Bachelorarbeit-Konfidenzbaender/KBminmaxpoly/man/Beispiel-R.R')
par.bsp.poly
par.bsp.minmax
par.bsp.R
source('~/Dokumente/R/07-Bachelorarbeit-Konfidenzbaender/KBminmaxpoly/man/Beispiel-AR.R')
par.bsp.poly
par.bsp.R, par.bsp.minmax, par.bsp.poly
par.bsp.R
par.bsp.minmax
par.bsp.poly
plot(0,0,xlim=c(0,1),ylim=c(min(plot.KB.R[[2]]),max(plot.KB.R[[3]])), xlab="relative Zeit",
ylab="relatives Wachstum", cex=2, lwd=3, cex.axis=2, cex.lab=2)
plot(0,0,xlim=c(0,1),ylim=c(min(plot.KB.R[[2]]),max(plot.KB.R[[3]])), xlab="relative Zeit",
ylab="relatives Wachstum", cex=2, lwd=3, cex.axis=2, cex.lab=2)
points(x,y, cex=2, lwd=3)
curve(fit.1[[2]][1]+fit.1[[2]][2]*x+fit.1[[2]][3]*x^2+fit.1[[2]][4]*x^3, add=T, cex=2, lwd=3)
lines(plot.KB.R[[1]], plot.KB.R[[2]], lty=1, cex=2, lwd=3)
lines(plot.KB.R[[1]], plot.KB.R[[3]], lty=1, cex=2, lwd=3)
lines(plot.KB.minmax[[1]], plot.KB.minmax[[2]], lty=2, cex=2, lwd=3)
lines(plot.KB.minmax[[1]], plot.KB.minmax[[3]], lty=2, cex=2, lwd=3)
lines(plot.KB.poly[[1]], plot.KB.poly[[2]], lty=3, cex=2, lwd=3)
lines(plot.KB.poly[[1]], plot.KB.poly[[3]], lty=3, cex=2, lwd=3)
source('~/Dokumente/R/07-Bachelorarbeit-Konfidenzbaender/KBminmaxpoly/man/Beispiel-R.R')
source('~/Dokumente/R/07-Bachelorarbeit-Konfidenzbaender/KBminmaxpoly/man/Beispiel-R.R')
par.bsp.R
par.bsp.minmax
par.bsp.poly
source('~/Dokumente/R/07-Bachelorarbeit-Konfidenzbaender/KBminmaxpoly/man/Beispiel-R.R')
par.bsp.R
par.bsp.minmax
par.bsp.poly
y
#seed.1=100
set.seed(seed.1)
# wahre Werte erzeugen
grad=3
nobs=50
x.raw=c(1:nobs)
x=x.raw/max(x.raw)
X=numeric()
for(i in 1:(grad+1)){X=matrix(c(X,x^(i-1)),ncol=i)}
beta=c(10,5,-4,7)
sigma=1
I.mat = diag(length(x.raw))
e=rmvnorm(1,mean=rep(0,length(x.raw)), sigma=sigma*I.mat)
y.raw=X %*% beta + t(e)
# plot der Daten
pdf("man/0-Latex/graphics/Beispiel/data-raw-R.pdf",
width=10,height=8)
plot(x.raw,y.raw, xlab="Zeit", ylab="Wachstum", pch=1, cex=2, lwd=3, cex.axis=2, cex.lab=2)
dev.off()
############################
# Daten normalisieren
y=y.raw/max(y.raw)
y
y=y.test
y.test=y
source('~/Dokumente/R/07-Bachelorarbeit-Konfidenzbaender/KBminmaxpoly/man/Beispiel-R.R')
par.bsp.R
par.bsp.minmax
par.bsp.poly
y
y.test
y=y.test
source('~/Dokumente/R/07-Bachelorarbeit-Konfidenzbaender/KBminmaxpoly/man/Beispiel-R.R')
y==y.test
par.bsp.R
par.bsp.minmax
par.bsp.poly
source('~/Dokumente/R/07-Bachelorarbeit-Konfidenzbaender/KBminmaxpoly/man/Beispiel-R.R')
par.bsp.R
par.bsp.minmax
par.bsp.poly
source('~/Dokumente/R/07-Bachelorarbeit-Konfidenzbaender/KBminmaxpoly/man/Beispiel-R.R')
par.bsp.poly
par.bsp.minmax
par.bsp.R
source('~/Dokumente/R/07-Bachelorarbeit-Konfidenzbaender/KBminmaxpoly/man/Beispiel-R.R')
par.bsp.R
par.bsp.minmax
par.bsp.poly
source('~/Dokumente/R/07-Bachelorarbeit-Konfidenzbaender/KBminmaxpoly/man/Beispiel-R.R')
par.bsp.R
par.bsp.minmax
par.bsp.poly
source('~/Dokumente/R/07-Bachelorarbeit-Konfidenzbaender/KBminmaxpoly/man/Beispiel-R.R')
par.bsp.R
par.bsp.minmax
par.bsp.poly
source('~/Dokumente/R/07-Bachelorarbeit-Konfidenzbaender/KBminmaxpoly/man/Beispiel-R.R')
cov.poly.fast.AR-bekannt=NA
cov.poly.fast.AR.bekannt=NA
system.time({cov.poly.fast.AR.bekannt=Coverage.prob.fun("AR-bekannt", "minmax-poly-fast",
niter = 5000, ngridpoly = 100)})
source('~/Dokumente/R/07-Bachelorarbeit-Konfidenzbaender/KBminmaxpoly/man/Beispiel-AR.R')
seed.1=100
set.seed(seed.1)
grad=3
grad.1=3
grad.3=4
nobs=50
beta.true=c(10,5,-4,7)
sigma.true=1 #0.007545373
phi.true=0.001 #0.8225374  # bestimmt die korrelation
x.raw=c(0:(nobs-1))
x=x.raw/max(x.raw)
X=matrix(data=NA,nrow=nobs,ncol=(grad+1))
for(j in 1:nobs){
for(i in 1:(grad+1)){X[j,i]=x[j]^(i-1)}
}
X.3=matrix(data=NA,nrow=nobs,ncol=(grad.3+1))
for(j in 1:nobs){
for(i in 1:(grad+1)){X.3[j,i]=x[j]^(i-1)}
}
alpha=0.05
niter=100
ngrid=nobs
a=0 # diese Werte definieren A
b=1
time=0:(nobs-1)/(nobs-1)
time.2=time^2
time.3=time^3
time.4=time^4
alpha=0.05
ngrid=nobs
X.mat=t(X) %*% X
X.mat.inv.1=solve(X.mat)
Upsilon = Upsilon_fun(phi, length(x.raw))[[1]]
Upsilon=Upsilon*sigma
Upsilon = Upsilon_fun(phi.true, length(x.raw))[[1]]
Upsilon=Upsilon*sigma
sigma
sigma.true
Upsilon=Upsilon*sigma.true
e=rmvnorm(1,mean=rep(0,length(x.raw)),Upsilon)
y.raw=X %*% beta + t(e)
y.raw=X %*% beta.true + t(e)
pdf("man/0-Latex/graphics/Beispiel/data-raw-AR.pdf",
width=10,height=8)
plot(x.raw,y.raw, xlab="Zeit", ylab="Wachstum", pch=1, cex=2, lwd=3, cex.axis=2, cex.lab=2)
dev.off()
plot(x.raw,y.raw, xlab="Zeit", ylab="Wachstum", pch=1, cex=2, lwd=3, cex.axis=2, cex.lab=2)
y=y.raw/max(y.raw)
grad.1=3
Y.gls.1 <- gls(y~time+time.2+time.3,correlation=corAR1())
beta.1=Y.gls.1$coefficients
sigma.1=Y.gls.1$sigma
grad.3=4
Y.gls.3 <- gls(y~time+I(time^2)+I(time^3),correlation=corAR1())
beta.3=Y.gls.3$coefficients
sigma.3=Y.gls.3$sigma
plot(x,y, xlab="relative Zeit", ylab="relatives Wachstum", cex=2, lwd=3, cex.axis=2, cex.lab=2)
curve(beta.1[1]+beta.1[2]*x+beta.1[3]*x^2+beta.1[4]*x^3,add=T, cex=2, lwd=3)
curve(beta.3[1]+beta.3[2]*x+beta.3[3]*x^2+beta.3[4]*x^3+beta.3[4]*x^3, add=T,
cex=2, lwd=3, lty="dashed")
curve(beta.3[1]+beta.3[2]*x+beta.3[3]*x^2+beta.3[4]*x^3+beta.3[4]*x^4, add=T,
cex=2, lwd=3, lty="dashed")
plot(x,y, xlab="relative Zeit", ylab="relatives Wachstum", cex=2, lwd=3, cex.axis=2, cex.lab=2)
curve(beta.1[1]+beta.1[2]*x+beta.1[3]*x^2+beta.1[4]*x^3,add=T, cex=2, lwd=3)
curve(beta.3[1]+beta.3[2]*x+beta.3[3]*x^2+beta.3[4]*x^3+beta.3[4]*x^4, add=T,
cex=2, lwd=3, lty="dashed")
curve(beta.3[1]+beta.3[2]*x+beta.3[3]*x^2+beta.3[4]*x^3+beta.3[5]*x^4, add=T,
cex=2, lwd=3, lty="dashed")
plot(x,y, xlab="relative Zeit", ylab="relatives Wachstum", cex=2, lwd=3, cex.axis=2, cex.lab=2)
curve(beta.1[1]+beta.1[2]*x+beta.1[3]*x^2+beta.1[4]*x^3,add=T, cex=2, lwd=3)
curve(beta.3[1]+beta.3[2]*x+beta.3[3]*x^2+beta.3[4]*x^3+beta.3[5]*x^4, add=T,
cex=2, lwd=3, lty="dashed")
beta.3
beta.1
grad.3=4
Y.gls.3 <- gls(y~time+time.2+time.3+time.4,correlation=corAR1())
beta.3=Y.gls.3$coefficients
sigma.3=Y.gls.3$sigma
plot(x,y, xlab="relative Zeit", ylab="relatives Wachstum", cex=2, lwd=3, cex.axis=2, cex.lab=2)
curve(beta.1[1]+beta.1[2]*x+beta.1[3]*x^2+beta.1[4]*x^3,add=T, cex=2, lwd=3)
curve(beta.3[1]+beta.3[2]*x+beta.3[3]*x^2+beta.3[4]*x^3+beta.3[5]*x^4, add=T,
cex=2, lwd=3, lty="dashed")
legend(x="topleft", legend=c("Grad 1", "Grad 3"),
col=c("black", "black"),cex=2, lwd=3, lty=c("solid", "dashed"))
legend(x="topleft", legend=c("Grad 3", "Grad 4"),
col=c("black", "black"),cex=2, lwd=3, lty=c("solid", "dashed"))
niter=5000
par.bsp.poly.hetero=KB.poly.fast(alpha, length(y), 1, niter, inv.X.hetero.1, a=0, b=1, ngridpoly = 50)
X=matrix(data=NA,nrow=nobs,ncol=(grad+1))
for(j in 1:nobs){
for(i in 1:(grad+1)){X[j,i]=x[j]^(i-1)}
}
X.mat=t(X) %*% X
X.mat.inv.1=solve(X.mat)
X.mat
X.mat.inv.1
X.3=matrix(data=NA,nrow=nobs,ncol=(grad.3+1))
for(j in 1:nobs){
for(i in 1:(grad.3+1)){X.3[j,i]=x[j]^(i-1)}
}
X.mat.3=t(X.3) %*% X.3
X.mat.inv.3=solve(X.mat.3)
X.mat.3
X.mat.inv.3
par.bsp.poly.hetero=KB.poly.fast(alpha, length(y), 1, niter, inv.X.1, a=0, b=1, ngridpoly = 50)
inv.X.1
inv.X.1
X.mat.inv.1
par.bsp.poly.hetero=KB.poly.fast(alpha, length(y), 1, niter, X.mat.inv.1, a=0, b=1, ngridpoly = 50)
par.bsp.poly.hetero=KB.poly.fast(alpha, length(y), grad = 3, niter, X.mat.inv.1, a=0, b=1, ngridpoly = 50)
par.bsp.poly.1=KB.poly.fast(alpha, length(y), grad = 3, niter, X.mat.inv.1, a=0, b=1, ngridpoly = 100)
plot.KB.poly.hetero=plot.KB(length(y), grad = 3, inv.X.1, beta.1, sigma.1, par.bsp.poly.1[[1]],
ngrid = length(y))
plot.KB.poly.hetero=plot.KB(length(y), grad = 3, X.mat.inv.1, beta.1, sigma.1, par.bsp.poly.1[[1]],
ngrid = length(y))
par.bsp.poly.3=KB.poly.fast(alpha, length(y), grad = 4, niter, X.mat.inv.3, a=0, b=1, ngridpoly = 100)
plot.KB.poly.hetero=plot.KB(length(y), grad = 4, X.mat.inv.3, beta.1, sigma.1, par.bsp.poly.1[[1]],
ngrid = length(y))
plot.KB.poly.hetero=plot.KB(length(y), grad = 4, X.mat.inv.3, beta.3, sigma.3, par.bsp.poly.1[[1]],
ngrid = length(y))
plot(0,0,xlim=c(0,1),ylim=c(min(plot.KB.poly.hetero[[2]]),max(plot.KB.poly.hetero[[3]])),
xlab="relative Zeit", ylab="relatives Wachstum", cex=2, lwd=3, cex.axis=2, cex.lab=2)
points(x,y, cex=2, lwd=3)
curve(beta.1[1]+beta.1[2]*x+beta.1[3]*x^2+beta.1[4]*x^3,add=T, cex=2, lwd=3)
curve(beta.3[1]+beta.3[2]*x+beta.3[3]*x^2+beta.3[4]*x^3+beta.3[5]*x^4, add=T,
cex=2, lwd=3, lty="dashed")
lines(plot.KB.poly.hetero[[1]], plot.KB.poly.hetero[[2]], lty=1, cex=2, lwd=3)
lines(plot.KB.poly.hetero[[1]], plot.KB.poly.hetero[[3]], lty=1, cex=2, lwd=3)
plot(0,0,xlim=c(0,1),ylim=c(min(plot.KB.poly.hetero[[2]]),max(plot.KB.poly.hetero[[3]])),
xlab="relative Zeit", ylab="relatives Wachstum", cex=2, lwd=3, cex.axis=2, cex.lab=2)
points(x,y, cex=2, lwd=3)
curve(beta.1[1]+beta.1[2]*x+beta.1[3]*x^2+beta.1[4]*x^3,add=T, cex=2, lwd=3)
curve(beta.3[1]+beta.3[2]*x+beta.3[3]*x^2+beta.3[4]*x^3+beta.3[5]*x^4, add=T,
cex=2, lwd=3, lty="dashed")
lines(plot.KB.poly.1[[1]], plot.KB.poly.1[[2]], lty=1, cex=2, lwd=3)
plot.KB.poly.1=plot.KB(length(y), grad = 3, X.mat.inv.1, beta.1, sigma.1, par.bsp.poly.1[[1]],
ngrid = length(y))
plot.KB.poly.3=plot.KB(length(y), grad = 4, X.mat.inv.3, beta.3, sigma.3, par.bsp.poly.1[[1]],
ngrid = length(y))
lines(plot.KB.poly.1[[1]], plot.KB.poly.1[[2]], lty=1, cex=2, lwd=3)
lines(plot.KB.poly.1[[1]], plot.KB.poly.1[[3]], lty=1, cex=2, lwd=3)
lines(plot.KB.poly.3[[1]], plot.KB.poly.3[[2]], lty=1, cex=2, lwd=3)
lines(plot.KB.poly.3[[1]], plot.KB.poly.3[[3]], lty=1, cex=2, lwd=3)
legend(x="topleft", legend=c("Polynom AR"), cex=2, lty=1, lwd=3)
legend(x="topleft", legend=c("Grad 3", "Grad 4"), cex=2, lty=c(1, "dashed"), lwd=3)
legend(x="topleft", legend=c("Grad 3", "Grad 4"),
col=c("black","black"),cex=2, lty=c(1,2), lwd=3)
legend(x="topleft", legend=c("Grad 3", "Grad 4"),
col=c("black","black"),cex=2, lty=c(1,"dashed"), lwd=3)
legend(x="topleft", legend=c("Grad 3", "Grad 4"),
col=c("black","black"),cex=2, lty=c(1,2), lwd=3)
plot(0,0,xlim=c(0,1),ylim=c(min(plot.KB.poly.hetero[[2]]),max(plot.KB.poly.hetero[[3]])),
xlab="relative Zeit", ylab="relatives Wachstum", cex=2, lwd=3, cex.axis=2, cex.lab=2)
points(x,y, cex=2, lwd=3)
curve(beta.1[1]+beta.1[2]*x+beta.1[3]*x^2+beta.1[4]*x^3,add=T, cex=2, lwd=3)
curve(beta.3[1]+beta.3[2]*x+beta.3[3]*x^2+beta.3[4]*x^3+beta.3[5]*x^4, add=T,
cex=2, lwd=3, lty="dashed")
lines(plot.KB.poly.1[[1]], plot.KB.poly.1[[2]], lty=1, cex=2, lwd=3)
lines(plot.KB.poly.1[[1]], plot.KB.poly.1[[3]], lty=1, cex=2, lwd=3)
lines(plot.KB.poly.3[[1]], plot.KB.poly.3[[2]], lty="dashed", cex=2, lwd=3)
lines(plot.KB.poly.3[[1]], plot.KB.poly.3[[3]], lty="dashed", cex=2, lwd=3)
legend(x="topleft", legend=c("Grad 3", "Grad 4"),
col=c("black","black"),cex=2, lty=c(1,2), lwd=3)
pdf("man/0-Latex/graphics/Beispiel/Bsp-KB-poly-AR.pdf",
width=10,height=8)
plot(0,0,xlim=c(0,1),ylim=c(min(plot.KB.poly.hetero[[2]]),max(plot.KB.poly.hetero[[3]])),
xlab="relative Zeit", ylab="relatives Wachstum", cex=2, lwd=3, cex.axis=2, cex.lab=2)
points(x,y, cex=2, lwd=3)
curve(beta.1[1]+beta.1[2]*x+beta.1[3]*x^2+beta.1[4]*x^3,add=T, cex=2, lwd=3)
curve(beta.3[1]+beta.3[2]*x+beta.3[3]*x^2+beta.3[4]*x^3+beta.3[5]*x^4, add=T,
cex=2, lwd=3, lty="dashed")
lines(plot.KB.poly.1[[1]], plot.KB.poly.1[[2]], lty=1, cex=2, lwd=3)
lines(plot.KB.poly.1[[1]], plot.KB.poly.1[[3]], lty=1, cex=2, lwd=3)
lines(plot.KB.poly.3[[1]], plot.KB.poly.3[[2]], lty="dashed", cex=2, lwd=3)
lines(plot.KB.poly.3[[1]], plot.KB.poly.3[[3]], lty="dashed", cex=2, lwd=3)
legend(x="topleft", legend=c("Grad 3", "Grad 4"),
col=c("black","black"),cex=2, lty=c(1,2), lwd=3)
dev.off()
delta.mat.hetero=Delta(inv.X.1, inv.X.3)
delta.mat.hetero=Delta(X.mat.inv.1, X.mat.inv.3)
par.bsp.vergl.hetero=KB.poly.fast(alpha, length(y), 3, niter, delta.mat.hetero[[1]], a=0, b=1,
ngridpoly = length(y))
par.bsp.vergl.hetero=KB.poly.fast(alpha, length(y), grad = 4, niter, delta.mat.hetero[[1]], a=0, b=1,
ngridpoly = length(y))
plot.bsp.vergl.hetero=plot.KB.vergl(y, y, grad = 4, delta.mat.hetero[[1]], beta.hetero.1,
beta.hetero.3, sigma.hetero.1, sigma.hetero.3,
par.bsp.vergl.hetero[[1]], ngrid = length(y))
plot.bsp.vergl.hetero=plot.KB.vergl(y, y, grad = 4, delta.mat.hetero[[1]], beta.hetero.1,
beta.hetero.3, sigma.1, sigma.3,
par.bsp.vergl.hetero[[1]], ngrid = length(y))
plot.bsp.vergl.hetero=plot.KB.vergl(y, y, grad = 4, delta.mat.hetero[[1]], beta.1,
beta.3, sigma.1, sigma.3,
par.bsp.vergl.hetero[[1]], ngrid = length(y))
plot(0,0,xlim=c(0,1),ylim=c(min(plot.bsp.vergl.hetero[[2]]),max(plot.bsp.vergl.hetero[[3]])),
xlab="relative Zeit", ylab="relatives Wachstum", cex=2, lwd=3, cex.axis=2, cex.lab=2)
lines(c(1,0),c(0,0), cex=2, lwd=3)
curve(fit.hetero.1[[2]][1]-fit.hetero.3[[2]][1]+(fit.hetero.1[[2]][2]-fit.hetero.3[[2]][2])*x-fit.hetero.3[[2]][3]*x^2-fit.hetero.3[[2]][4]*x^3,
col="black", add=T, cex=2, lwd=3)
curve(beta.1[1]-beta.3[1]+(beta.1[2]-beta.3[2])*x-(beta.1[3]-beta.3[3])*x^2-(beta.1[4]-beta.3[4])*x^3-beta.3[4]*x^4,
col="black", add=T, cex=2, lwd=3)
beta.1[1]-beta.3[1]
beta.1[2]-beta.3[2]
beta.1[3]-beta.3[3]
beta.1[4]-beta.3[4]
beta.3[4]
curve(beta.1[1]-beta.3[1]+(beta.1[2]-beta.3[2])*x-(beta.1[3]-beta.3[3])*x^2-(beta.1[4]-beta.3[4])*x^3-beta.3[4]*x^4,
col="black", add=T, cex=2, lwd=3)
lines(plot.bsp.vergl.hetero[[1]], plot.bsp.vergl.hetero[[2]], col="black", cex=2, lwd=3)
lines(plot.bsp.vergl.hetero[[1]], plot.bsp.vergl.hetero[[3]], col="black", cex=2, lwd=3)
curve(beta.1[1]-beta.3[1]+(beta.1[2]-beta.3[2])*x+(beta.1[3]-beta.3[3])*x^2+(beta.1[4]-beta.3[4])*x^3+beta.3[4]*x^4,
col="black", add=T, cex=2, lwd=3)
curve(beta.1[1]-beta.3[1]+(beta.1[2]-beta.3[2])*x+(beta.1[3]-beta.3[3])*x^2+(beta.1[4]-beta.3[4])*x^3,
col="black", add=T, cex=2, lwd=3)
plot(0,0,xlim=c(0,1),ylim=c(min(plot.bsp.vergl.hetero[[2]]),max(plot.bsp.vergl.hetero[[3]])),
xlab="relative Zeit", ylab="relatives Wachstum", cex=2, lwd=3, cex.axis=2, cex.lab=2)
lines(c(1,0),c(0,0), cex=2, lwd=3)
curve(beta.1[1]-beta.3[1]+(beta.1[2]-beta.3[2])*x+(beta.1[3]-beta.3[3])*x^2+(beta.1[4]-beta.3[4])*x^3,
col="black", add=T, cex=2, lwd=3)
curve(beta.1[1]-beta.3[1]+(beta.1[2]-beta.3[2])*x+(beta.1[3]-beta.3[3])*x^2+(beta.1[4]-beta.3[4])*x^3-beta.3[4]*x^4,
col="black", add=T, cex=2, lwd=3)
plot(0,0,xlim=c(0,1),ylim=c(min(plot.bsp.vergl.hetero[[2]]),max(plot.bsp.vergl.hetero[[3]])),
xlab="relative Zeit", ylab="relatives Wachstum", cex=2, lwd=3, cex.axis=2, cex.lab=2)
lines(c(1,0),c(0,0), cex=2, lwd=3)
curve(beta.1[1]-beta.3[1]+(beta.1[2]-beta.3[2])*x+(beta.1[3]-beta.3[3])*x^2+(beta.1[4]-beta.3[4])*x^3-beta.3[4]*x^4,
col="black", add=T, cex=2, lwd=3)
lines(plot.bsp.vergl.hetero[[1]], plot.bsp.vergl.hetero[[2]], col="black", cex=2, lwd=3)
lines(plot.bsp.vergl.hetero[[1]], plot.bsp.vergl.hetero[[3]], col="black", cex=2, lwd=3)
beta.1[1]-beta.3[1]
beta.1[2]-beta.3[2]
beta.1[3]-beta.3[3]
beta.1[4]-beta.3[4]
beta.1-beta.3
c(beta.1,0)-beta.3
time
X
X.3
X.3%*%beta.vergl
beta.vergl=c(beta.1,0)-beta.3
X.3%*%beta.vergl
plot(0,0,xlim=c(0,1),ylim=c(min(plot.bsp.vergl.hetero[[2]]),max(plot.bsp.vergl.hetero[[3]])),
xlab="relative Zeit", ylab="relatives Wachstum", cex=2, lwd=3, cex.axis=2, cex.lab=2)
lines(c(1,0),c(0,0), cex=2, lwd=3)
beta.vergl=c(beta.1,0)-beta.3
lines(time, X.3%*%beta.vergl)
lines(plot.bsp.vergl.hetero[[1]], plot.bsp.vergl.hetero[[2]], col="black", cex=2, lwd=3)
lines(plot.bsp.vergl.hetero[[1]], plot.bsp.vergl.hetero[[3]], col="black", cex=2, lwd=3)
plot(0,0,xlim=c(0,1),ylim=c(min(plot.bsp.vergl.hetero[[2]]),max(plot.bsp.vergl.hetero[[3]])),
xlab="relative Zeit", ylab="relatives Wachstum", cex=2, lwd=3, cex.axis=2, cex.lab=2)
lines(c(1,0),c(0,0), cex=2, lwd=3)
beta.vergl=c(beta.1,0)-beta.3
lines(time, X.3%*%beta.vergl, cex=2, lwd=3)
lines(plot.bsp.vergl.hetero[[1]], plot.bsp.vergl.hetero[[2]], col="black", cex=2, lwd=3)
lines(plot.bsp.vergl.hetero[[1]], plot.bsp.vergl.hetero[[3]], col="black", cex=2, lwd=3)
source('~/Dokumente/R/07-Bachelorarbeit-Konfidenzbaender/KBminmaxpoly/man/Beispiel-AR.R')
source('~/Dokumente/R/07-Bachelorarbeit-Konfidenzbaender/KBminmaxpoly/man/Beispiel-AR.R')
cov.poly.fast.R=NA
system.time({cov.ploy.fast.R=Coverage.prob.fun("R", "minmax-poly-fast", niter = 5000, ngridpoly = 100)})
cov.poly.fast.R
?delete
cov.poly.fast.R=NA
system.time({cov.ploy.fast.R=Coverage.prob.fun("R", "minmax-poly-fast", niter = 5000, ngridpoly = 100)})
cov.poly.fast.R=NA
system.time({cov.ploy.fast.R=Coverage.prob.fun("R", "minmax-poly-fast", niter = 5000, ngridpoly = 100)})
cov.poly.fast.R=NA
system.time({cov.poly.fast.R=Coverage.prob.fun("R", "minmax-poly-fast", niter = 5000, ngridpoly = 100)})
source('~/Dokumente/R/07-Bachelorarbeit-Konfidenzbaender/KBminmaxpoly/man/Beispiel-R.R')
plot(x,y, xlab="relative Zeit", ylab="relatives Wachstum", cex=2, lwd=3, cex.axis=2, cex.lab=2)
curve(fit.1[[2]][1]+fit.1[[2]][2]*x+fit.1[[2]][3]*x^2+fit.1[[2]][4]*x^3, add=T, cex=2, lwd=3)
curve(fit.3[[2]][1]+fit.3[[2]][2]*x+fit.3[[2]][3]*x^2+fit.3[[2]][4]*x^3+fit.3[[2]][5]*x^4,
add=T, lty="dashed", cex=2, lwd=3)
plot(0,0,xlim=c(0,1),ylim=c(min(plot.bsp.vergl[[2]]),max(plot.bsp.vergl[[3]])), xlab="relative Zeit",
ylab="relatives Wachstum", cex=2, lwd=3, cex.axis=2, cex.lab=2)
lines(c(1,0),c(0,0), cex=2, lwd=3)
curve(fit.1[[2]][1]-fit.3[[2]][1]+(fit.1[[2]][2]-fit.3[[2]][2])*x+(fit.1[[2]][3]-fit.3[[2]][3])*x^2+
(fit.1[[2]][4]-fit.3[[2]][4])*x^3-fit.3[[2]][5]*x^4
, add=T, cex=2, lwd=3)
lines(plot.bsp.vergl[[1]], plot.bsp.vergl[[2]], lty=1, cex=2, lwd=3)
lines(plot.bsp.vergl[[1]], plot.bsp.vergl[[3]], lty=1, cex=2, lwd=3)
erg
teststat
q
set.seed(100)
ntest=100
grad=5
nobs=50
beta=c(10,5,-4,7,3,-4)
x.raw=c(0:(nobs-1))
x=x.raw/max(x.raw)
X=matrix(data=NA,nrow=nobs,ncol=(grad+1))
for(j in 1:nobs){
for(i in 1:(grad+1)){X[j,i]=x[j]^(i-1)}
}
mu=X%*%beta
sigma.true=sqrt(var(mu))/2  ##choose SNR 1 (low) or 3 (medium)
I=matrix(diag(nobs),nrow=nobs,ncol=nobs)
View(sigma.true)
data_R_true <- (X %*% beta)
alpha=0.05
ngrid=nobs
X.mat=t(X) %*% X
X.mat.inv=solve(X.mat)
a=0
b=1
data_R_test=matrix(rep(rep(NA, ntest), nobs), nrow=nobs)
for(i in 1:ntest)
{
# wahre Werte erzeugen
e=mvtnorm::rmvnorm(1,mean=rep(0,length(x.raw)),sigma.true[1]*I)
data_R_test[,i]=X %*% beta + t(e)
}
data_R_test
data_R_test[1]
data_R_test[1,]
set.seed(100)
ntest=100
grad=2
nobs=50
beta=c(10,5)
x.raw=c(0:(nobs-1))
x=x.raw/max(x.raw)
X=matrix(data=NA,nrow=nobs,ncol=(grad+1))
for(j in 1:nobs){
for(i in 1:(grad+1)){X[j,i]=x[j]^(i-1)}
}
mu=X%*%beta
sigma.true=sqrt(var(mu))/2  ##choose SNR 1 (low) or 3 (medium)
X
grad=1
nobs=50
beta=c(10,5)
x.raw=c(0:(nobs-1))
x=x.raw/max(x.raw)
X=matrix(data=NA,nrow=nobs,ncol=(grad+1))
for(j in 1:nobs){
for(i in 1:(grad+1)){X[j,i]=x[j]^(i-1)}
}
mu=X%*%beta
sigma.true=sqrt(var(mu))/2  ##choose SNR 1 (low) or 3 (medium)
I=matrix(diag(nobs),nrow=nobs,ncol=nobs)
data_R_true <- (X %*% beta)
alpha=0.05
ngrid=nobs
X.mat=t(X) %*% X
X.mat.inv=solve(X.mat)
a=0
b=1
data_R_test=matrix(rep(rep(NA, ntest), nobs), nrow=nobs)
for(i in 1:ntest)
{
# wahre Werte erzeugen
e=mvtnorm::rmvnorm(1,mean=rep(0,length(x.raw)),sigma.true[1]*I)
data_R_test[,i]=X %*% beta + t(e)
}
plot(x, data_R_test[,1])
lines(x, data_R_true)
plot(x, data_R_test[,2])
plot(x, data_R_test[,3])
source('~/Dokumente/R/07-Bachelorarbeit-Konfidenzbaender/KBminmaxpoly/man/Beispiel-R.R')
devtools::load_all(".")
